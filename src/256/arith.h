#ifndef FQ_ARITHMETIC_GF256_ARITH_H
#define FQ_ARITHMETIC_GF256_ARITH_H

#include <stdint.h>
#include "../helper.h"

/// sources:
/// https://github.com/moepinet/libmoepgf
/// https://github.com/PQCMayo/MAYO-C

// gf256 := 0x11b , AES field
#define MODULUS 0x1B
#define MASK_LSB_PER_BIT ((uint64_t)0x0101010101010101)
#define MASK_MSB_PER_BIT (MASK_LSB_PER_BIT*0x80)
#define MASK_XLSB_PER_BIT (MASK_LSB_PER_BIT*0xFE)

typedef uint8_t gf256;

/// translates a gf16 element to an gf256 element
const uint8_t gf256_expand_tab[16] = {
    0, 1, 92, 93, 224, 225, 188, 189, 80, 81, 12, 13, 176, 177, 236, 237
};

// full multiplication table: [i*256 + j] = i*j mod 256
const gf256 __gf256_mul[8192] __attribute__((aligned(32))) = {
        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
        0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07, 0x08,0x09,0x0a,0x0b,0x0c,0x0d,0x0e,0x0f, 0x00,0x10,0x20,0x30,0x40,0x50,0x60,0x70, 0x80,0x90,0xa0,0xb0,0xc0,0xd0,0xe0,0xf0,
        0x00,0x02,0x04,0x06,0x08,0x0a,0x0c,0x0e, 0x10,0x12,0x14,0x16,0x18,0x1a,0x1c,0x1e, 0x00,0x20,0x40,0x60,0x80,0xa0,0xc0,0xe0, 0x1b,0x3b,0x5b,0x7b,0x9b,0xbb,0xdb,0xfb,
        0x00,0x03,0x06,0x05,0x0c,0x0f,0x0a,0x09, 0x18,0x1b,0x1e,0x1d,0x14,0x17,0x12,0x11, 0x00,0x30,0x60,0x50,0xc0,0xf0,0xa0,0x90, 0x9b,0xab,0xfb,0xcb,0x5b,0x6b,0x3b,0x0b,
        0x00,0x04,0x08,0x0c,0x10,0x14,0x18,0x1c, 0x20,0x24,0x28,0x2c,0x30,0x34,0x38,0x3c, 0x00,0x40,0x80,0xc0,0x1b,0x5b,0x9b,0xdb, 0x36,0x76,0xb6,0xf6,0x2d,0x6d,0xad,0xed,
        0x00,0x05,0x0a,0x0f,0x14,0x11,0x1e,0x1b, 0x28,0x2d,0x22,0x27,0x3c,0x39,0x36,0x33, 0x00,0x50,0xa0,0xf0,0x5b,0x0b,0xfb,0xab, 0xb6,0xe6,0x16,0x46,0xed,0xbd,0x4d,0x1d,
        0x00,0x06,0x0c,0x0a,0x18,0x1e,0x14,0x12, 0x30,0x36,0x3c,0x3a,0x28,0x2e,0x24,0x22, 0x00,0x60,0xc0,0xa0,0x9b,0xfb,0x5b,0x3b, 0x2d,0x4d,0xed,0x8d,0xb6,0xd6,0x76,0x16,
        0x00,0x07,0x0e,0x09,0x1c,0x1b,0x12,0x15, 0x38,0x3f,0x36,0x31,0x24,0x23,0x2a,0x2d, 0x00,0x70,0xe0,0x90,0xdb,0xab,0x3b,0x4b, 0xad,0xdd,0x4d,0x3d,0x76,0x06,0x96,0xe6,
        0x00,0x08,0x10,0x18,0x20,0x28,0x30,0x38, 0x40,0x48,0x50,0x58,0x60,0x68,0x70,0x78, 0x00,0x80,0x1b,0x9b,0x36,0xb6,0x2d,0xad, 0x6c,0xec,0x77,0xf7,0x5a,0xda,0x41,0xc1,
        0x00,0x09,0x12,0x1b,0x24,0x2d,0x36,0x3f, 0x48,0x41,0x5a,0x53,0x6c,0x65,0x7e,0x77, 0x00,0x90,0x3b,0xab,0x76,0xe6,0x4d,0xdd, 0xec,0x7c,0xd7,0x47,0x9a,0x0a,0xa1,0x31,
        0x00,0x0a,0x14,0x1e,0x28,0x22,0x3c,0x36, 0x50,0x5a,0x44,0x4e,0x78,0x72,0x6c,0x66, 0x00,0xa0,0x5b,0xfb,0xb6,0x16,0xed,0x4d, 0x77,0xd7,0x2c,0x8c,0xc1,0x61,0x9a,0x3a,
        0x00,0x0b,0x16,0x1d,0x2c,0x27,0x3a,0x31, 0x58,0x53,0x4e,0x45,0x74,0x7f,0x62,0x69, 0x00,0xb0,0x7b,0xcb,0xf6,0x46,0x8d,0x3d, 0xf7,0x47,0x8c,0x3c,0x01,0xb1,0x7a,0xca,
        0x00,0x0c,0x18,0x14,0x30,0x3c,0x28,0x24, 0x60,0x6c,0x78,0x74,0x50,0x5c,0x48,0x44, 0x00,0xc0,0x9b,0x5b,0x2d,0xed,0xb6,0x76, 0x5a,0x9a,0xc1,0x01,0x77,0xb7,0xec,0x2c,
        0x00,0x0d,0x1a,0x17,0x34,0x39,0x2e,0x23, 0x68,0x65,0x72,0x7f,0x5c,0x51,0x46,0x4b, 0x00,0xd0,0xbb,0x6b,0x6d,0xbd,0xd6,0x06, 0xda,0x0a,0x61,0xb1,0xb7,0x67,0x0c,0xdc,
        0x00,0x0e,0x1c,0x12,0x38,0x36,0x24,0x2a, 0x70,0x7e,0x6c,0x62,0x48,0x46,0x54,0x5a, 0x00,0xe0,0xdb,0x3b,0xad,0x4d,0x76,0x96, 0x41,0xa1,0x9a,0x7a,0xec,0x0c,0x37,0xd7,
        0x00,0x0f,0x1e,0x11,0x3c,0x33,0x22,0x2d, 0x78,0x77,0x66,0x69,0x44,0x4b,0x5a,0x55, 0x00,0xf0,0xfb,0x0b,0xed,0x1d,0x16,0xe6, 0xc1,0x31,0x3a,0xca,0x2c,0xdc,0xd7,0x27,
        0x00,0x10,0x20,0x30,0x40,0x50,0x60,0x70, 0x80,0x90,0xa0,0xb0,0xc0,0xd0,0xe0,0xf0, 0x00,0x1b,0x36,0x2d,0x6c,0x77,0x5a,0x41, 0xd8,0xc3,0xee,0xf5,0xb4,0xaf,0x82,0x99,
        0x00,0x11,0x22,0x33,0x44,0x55,0x66,0x77, 0x88,0x99,0xaa,0xbb,0xcc,0xdd,0xee,0xff, 0x00,0x0b,0x16,0x1d,0x2c,0x27,0x3a,0x31, 0x58,0x53,0x4e,0x45,0x74,0x7f,0x62,0x69,
        0x00,0x12,0x24,0x36,0x48,0x5a,0x6c,0x7e, 0x90,0x82,0xb4,0xa6,0xd8,0xca,0xfc,0xee, 0x00,0x3b,0x76,0x4d,0xec,0xd7,0x9a,0xa1, 0xc3,0xf8,0xb5,0x8e,0x2f,0x14,0x59,0x62,
        0x00,0x13,0x26,0x35,0x4c,0x5f,0x6a,0x79, 0x98,0x8b,0xbe,0xad,0xd4,0xc7,0xf2,0xe1, 0x00,0x2b,0x56,0x7d,0xac,0x87,0xfa,0xd1, 0x43,0x68,0x15,0x3e,0xef,0xc4,0xb9,0x92,
        0x00,0x14,0x28,0x3c,0x50,0x44,0x78,0x6c, 0xa0,0xb4,0x88,0x9c,0xf0,0xe4,0xd8,0xcc, 0x00,0x5b,0xb6,0xed,0x77,0x2c,0xc1,0x9a, 0xee,0xb5,0x58,0x03,0x99,0xc2,0x2f,0x74,
        0x00,0x15,0x2a,0x3f,0x54,0x41,0x7e,0x6b, 0xa8,0xbd,0x82,0x97,0xfc,0xe9,0xd6,0xc3, 0x00,0x4b,0x96,0xdd,0x37,0x7c,0xa1,0xea, 0x6e,0x25,0xf8,0xb3,0x59,0x12,0xcf,0x84,
        0x00,0x16,0x2c,0x3a,0x58,0x4e,0x74,0x62, 0xb0,0xa6,0x9c,0x8a,0xe8,0xfe,0xc4,0xd2, 0x00,0x7b,0xf6,0x8d,0xf7,0x8c,0x01,0x7a, 0xf5,0x8e,0x03,0x78,0x02,0x79,0xf4,0x8f,
        0x00,0x17,0x2e,0x39,0x5c,0x4b,0x72,0x65, 0xb8,0xaf,0x96,0x81,0xe4,0xf3,0xca,0xdd, 0x00,0x6b,0xd6,0xbd,0xb7,0xdc,0x61,0x0a, 0x75,0x1e,0xa3,0xc8,0xc2,0xa9,0x14,0x7f,
        0x00,0x18,0x30,0x28,0x60,0x78,0x50,0x48, 0xc0,0xd8,0xf0,0xe8,0xa0,0xb8,0x90,0x88, 0x00,0x9b,0x2d,0xb6,0x5a,0xc1,0x77,0xec, 0xb4,0x2f,0x99,0x02,0xee,0x75,0xc3,0x58,
        0x00,0x19,0x32,0x2b,0x64,0x7d,0x56,0x4f, 0xc8,0xd1,0xfa,0xe3,0xac,0xb5,0x9e,0x87, 0x00,0x8b,0x0d,0x86,0x1a,0x91,0x17,0x9c, 0x34,0xbf,0x39,0xb2,0x2e,0xa5,0x23,0xa8,
        0x00,0x1a,0x34,0x2e,0x68,0x72,0x5c,0x46, 0xd0,0xca,0xe4,0xfe,0xb8,0xa2,0x8c,0x96, 0x00,0xbb,0x6d,0xd6,0xda,0x61,0xb7,0x0c, 0xaf,0x14,0xc2,0x79,0x75,0xce,0x18,0xa3,
        0x00,0x1b,0x36,0x2d,0x6c,0x77,0x5a,0x41, 0xd8,0xc3,0xee,0xf5,0xb4,0xaf,0x82,0x99, 0x00,0xab,0x4d,0xe6,0x9a,0x31,0xd7,0x7c, 0x2f,0x84,0x62,0xc9,0xb5,0x1e,0xf8,0x53,
        0x00,0x1c,0x38,0x24,0x70,0x6c,0x48,0x54, 0xe0,0xfc,0xd8,0xc4,0x90,0x8c,0xa8,0xb4, 0x00,0xdb,0xad,0x76,0x41,0x9a,0xec,0x37, 0x82,0x59,0x2f,0xf4,0xc3,0x18,0x6e,0xb5,
        0x00,0x1d,0x3a,0x27,0x74,0x69,0x4e,0x53, 0xe8,0xf5,0xd2,0xcf,0x9c,0x81,0xa6,0xbb, 0x00,0xcb,0x8d,0x46,0x01,0xca,0x8c,0x47, 0x02,0xc9,0x8f,0x44,0x03,0xc8,0x8e,0x45,
        0x00,0x1e,0x3c,0x22,0x78,0x66,0x44,0x5a, 0xf0,0xee,0xcc,0xd2,0x88,0x96,0xb4,0xaa, 0x00,0xfb,0xed,0x16,0xc1,0x3a,0x2c,0xd7, 0x99,0x62,0x74,0x8f,0x58,0xa3,0xb5,0x4e,
        0x00,0x1f,0x3e,0x21,0x7c,0x63,0x42,0x5d, 0xf8,0xe7,0xc6,0xd9,0x84,0x9b,0xba,0xa5, 0x00,0xeb,0xcd,0x26,0x81,0x6a,0x4c,0xa7, 0x19,0xf2,0xd4,0x3f,0x98,0x73,0x55,0xbe,
        0x00,0x20,0x40,0x60,0x80,0xa0,0xc0,0xe0, 0x1b,0x3b,0x5b,0x7b,0x9b,0xbb,0xdb,0xfb, 0x00,0x36,0x6c,0x5a,0xd8,0xee,0xb4,0x82, 0xab,0x9d,0xc7,0xf1,0x73,0x45,0x1f,0x29,
        0x00,0x21,0x42,0x63,0x84,0xa5,0xc6,0xe7, 0x13,0x32,0x51,0x70,0x97,0xb6,0xd5,0xf4, 0x00,0x26,0x4c,0x6a,0x98,0xbe,0xd4,0xf2, 0x2b,0x0d,0x67,0x41,0xb3,0x95,0xff,0xd9,
        0x00,0x22,0x44,0x66,0x88,0xaa,0xcc,0xee, 0x0b,0x29,0x4f,0x6d,0x83,0xa1,0xc7,0xe5, 0x00,0x16,0x2c,0x3a,0x58,0x4e,0x74,0x62, 0xb0,0xa6,0x9c,0x8a,0xe8,0xfe,0xc4,0xd2,
        0x00,0x23,0x46,0x65,0x8c,0xaf,0xca,0xe9, 0x03,0x20,0x45,0x66,0x8f,0xac,0xc9,0xea, 0x00,0x06,0x0c,0x0a,0x18,0x1e,0x14,0x12, 0x30,0x36,0x3c,0x3a,0x28,0x2e,0x24,0x22,
        0x00,0x24,0x48,0x6c,0x90,0xb4,0xd8,0xfc, 0x3b,0x1f,0x73,0x57,0xab,0x8f,0xe3,0xc7, 0x00,0x76,0xec,0x9a,0xc3,0xb5,0x2f,0x59, 0x9d,0xeb,0x71,0x07,0x5e,0x28,0xb2,0xc4,
        0x00,0x25,0x4a,0x6f,0x94,0xb1,0xde,0xfb, 0x33,0x16,0x79,0x5c,0xa7,0x82,0xed,0xc8, 0x00,0x66,0xcc,0xaa,0x83,0xe5,0x4f,0x29, 0x1d,0x7b,0xd1,0xb7,0x9e,0xf8,0x52,0x34,
        0x00,0x26,0x4c,0x6a,0x98,0xbe,0xd4,0xf2, 0x2b,0x0d,0x67,0x41,0xb3,0x95,0xff,0xd9, 0x00,0x56,0xac,0xfa,0x43,0x15,0xef,0xb9, 0x86,0xd0,0x2a,0x7c,0xc5,0x93,0x69,0x3f,
        0x00,0x27,0x4e,0x69,0x9c,0xbb,0xd2,0xf5, 0x23,0x04,0x6d,0x4a,0xbf,0x98,0xf1,0xd6, 0x00,0x46,0x8c,0xca,0x03,0x45,0x8f,0xc9, 0x06,0x40,0x8a,0xcc,0x05,0x43,0x89,0xcf,
        0x00,0x28,0x50,0x78,0xa0,0x88,0xf0,0xd8, 0x5b,0x73,0x0b,0x23,0xfb,0xd3,0xab,0x83, 0x00,0xb6,0x77,0xc1,0xee,0x58,0x99,0x2f, 0xc7,0x71,0xb0,0x06,0x29,0x9f,0x5e,0xe8,
        0x00,0x29,0x52,0x7b,0xa4,0x8d,0xf6,0xdf, 0x53,0x7a,0x01,0x28,0xf7,0xde,0xa5,0x8c, 0x00,0xa6,0x57,0xf1,0xae,0x08,0xf9,0x5f, 0x47,0xe1,0x10,0xb6,0xe9,0x4f,0xbe,0x18,
        0x00,0x2a,0x54,0x7e,0xa8,0x82,0xfc,0xd6, 0x4b,0x61,0x1f,0x35,0xe3,0xc9,0xb7,0x9d, 0x00,0x96,0x37,0xa1,0x6e,0xf8,0x59,0xcf, 0xdc,0x4a,0xeb,0x7d,0xb2,0x24,0x85,0x13,
        0x00,0x2b,0x56,0x7d,0xac,0x87,0xfa,0xd1, 0x43,0x68,0x15,0x3e,0xef,0xc4,0xb9,0x92, 0x00,0x86,0x17,0x91,0x2e,0xa8,0x39,0xbf, 0x5c,0xda,0x4b,0xcd,0x72,0xf4,0x65,0xe3,
        0x00,0x2c,0x58,0x74,0xb0,0x9c,0xe8,0xc4, 0x7b,0x57,0x23,0x0f,0xcb,0xe7,0x93,0xbf, 0x00,0xf6,0xf7,0x01,0xf5,0x03,0x02,0xf4, 0xf1,0x07,0x06,0xf0,0x04,0xf2,0xf3,0x05,
        0x00,0x2d,0x5a,0x77,0xb4,0x99,0xee,0xc3, 0x73,0x5e,0x29,0x04,0xc7,0xea,0x9d,0xb0, 0x00,0xe6,0xd7,0x31,0xb5,0x53,0x62,0x84, 0x71,0x97,0xa6,0x40,0xc4,0x22,0x13,0xf5,
        0x00,0x2e,0x5c,0x72,0xb8,0x96,0xe4,0xca, 0x6b,0x45,0x37,0x19,0xd3,0xfd,0x8f,0xa1, 0x00,0xd6,0xb7,0x61,0x75,0xa3,0xc2,0x14, 0xea,0x3c,0x5d,0x8b,0x9f,0x49,0x28,0xfe,
        0x00,0x2f,0x5e,0x71,0xbc,0x93,0xe2,0xcd, 0x63,0x4c,0x3d,0x12,0xdf,0xf0,0x81,0xae, 0x00,0xc6,0x97,0x51,0x35,0xf3,0xa2,0x64, 0x6a,0xac,0xfd,0x3b,0x5f,0x99,0xc8,0x0e,
        0x00,0x30,0x60,0x50,0xc0,0xf0,0xa0,0x90, 0x9b,0xab,0xfb,0xcb,0x5b,0x6b,0x3b,0x0b, 0x00,0x2d,0x5a,0x77,0xb4,0x99,0xee,0xc3, 0x73,0x5e,0x29,0x04,0xc7,0xea,0x9d,0xb0,
        0x00,0x31,0x62,0x53,0xc4,0xf5,0xa6,0x97, 0x93,0xa2,0xf1,0xc0,0x57,0x66,0x35,0x04, 0x00,0x3d,0x7a,0x47,0xf4,0xc9,0x8e,0xb3, 0xf3,0xce,0x89,0xb4,0x07,0x3a,0x7d,0x40,
        0x00,0x32,0x64,0x56,0xc8,0xfa,0xac,0x9e, 0x8b,0xb9,0xef,0xdd,0x43,0x71,0x27,0x15, 0x00,0x0d,0x1a,0x17,0x34,0x39,0x2e,0x23, 0x68,0x65,0x72,0x7f,0x5c,0x51,0x46,0x4b,
        0x00,0x33,0x66,0x55,0xcc,0xff,0xaa,0x99, 0x83,0xb0,0xe5,0xd6,0x4f,0x7c,0x29,0x1a, 0x00,0x1d,0x3a,0x27,0x74,0x69,0x4e,0x53, 0xe8,0xf5,0xd2,0xcf,0x9c,0x81,0xa6,0xbb,
        0x00,0x34,0x68,0x5c,0xd0,0xe4,0xb8,0x8c, 0xbb,0x8f,0xd3,0xe7,0x6b,0x5f,0x03,0x37, 0x00,0x6d,0xda,0xb7,0xaf,0xc2,0x75,0x18, 0x45,0x28,0x9f,0xf2,0xea,0x87,0x30,0x5d,
        0x00,0x35,0x6a,0x5f,0xd4,0xe1,0xbe,0x8b, 0xb3,0x86,0xd9,0xec,0x67,0x52,0x0d,0x38, 0x00,0x7d,0xfa,0x87,0xef,0x92,0x15,0x68, 0xc5,0xb8,0x3f,0x42,0x2a,0x57,0xd0,0xad,
        0x00,0x36,0x6c,0x5a,0xd8,0xee,0xb4,0x82, 0xab,0x9d,0xc7,0xf1,0x73,0x45,0x1f,0x29, 0x00,0x4d,0x9a,0xd7,0x2f,0x62,0xb5,0xf8, 0x5e,0x13,0xc4,0x89,0x71,0x3c,0xeb,0xa6,
        0x00,0x37,0x6e,0x59,0xdc,0xeb,0xb2,0x85, 0xa3,0x94,0xcd,0xfa,0x7f,0x48,0x11,0x26, 0x00,0x5d,0xba,0xe7,0x6f,0x32,0xd5,0x88, 0xde,0x83,0x64,0x39,0xb1,0xec,0x0b,0x56,
        0x00,0x38,0x70,0x48,0xe0,0xd8,0x90,0xa8, 0xdb,0xe3,0xab,0x93,0x3b,0x03,0x4b,0x73, 0x00,0xad,0x41,0xec,0x82,0x2f,0xc3,0x6e, 0x1f,0xb2,0x5e,0xf3,0x9d,0x30,0xdc,0x71,
        0x00,0x39,0x72,0x4b,0xe4,0xdd,0x96,0xaf, 0xd3,0xea,0xa1,0x98,0x37,0x0e,0x45,0x7c, 0x00,0xbd,0x61,0xdc,0xc2,0x7f,0xa3,0x1e, 0x9f,0x22,0xfe,0x43,0x5d,0xe0,0x3c,0x81,
        0x00,0x3a,0x74,0x4e,0xe8,0xd2,0x9c,0xa6, 0xcb,0xf1,0xbf,0x85,0x23,0x19,0x57,0x6d, 0x00,0x8d,0x01,0x8c,0x02,0x8f,0x03,0x8e, 0x04,0x89,0x05,0x88,0x06,0x8b,0x07,0x8a,
        0x00,0x3b,0x76,0x4d,0xec,0xd7,0x9a,0xa1, 0xc3,0xf8,0xb5,0x8e,0x2f,0x14,0x59,0x62, 0x00,0x9d,0x21,0xbc,0x42,0xdf,0x63,0xfe, 0x84,0x19,0xa5,0x38,0xc6,0x5b,0xe7,0x7a,
        0x00,0x3c,0x78,0x44,0xf0,0xcc,0x88,0xb4, 0xfb,0xc7,0x83,0xbf,0x0b,0x37,0x73,0x4f, 0x00,0xed,0xc1,0x2c,0x99,0x74,0x58,0xb5, 0x29,0xc4,0xe8,0x05,0xb0,0x5d,0x71,0x9c,
        0x00,0x3d,0x7a,0x47,0xf4,0xc9,0x8e,0xb3, 0xf3,0xce,0x89,0xb4,0x07,0x3a,0x7d,0x40, 0x00,0xfd,0xe1,0x1c,0xd9,0x24,0x38,0xc5, 0xa9,0x54,0x48,0xb5,0x70,0x8d,0x91,0x6c,
        0x00,0x3e,0x7c,0x42,0xf8,0xc6,0x84,0xba, 0xeb,0xd5,0x97,0xa9,0x13,0x2d,0x6f,0x51, 0x00,0xcd,0x81,0x4c,0x19,0xd4,0x98,0x55, 0x32,0xff,0xb3,0x7e,0x2b,0xe6,0xaa,0x67,
        0x00,0x3f,0x7e,0x41,0xfc,0xc3,0x82,0xbd, 0xe3,0xdc,0x9d,0xa2,0x1f,0x20,0x61,0x5e, 0x00,0xdd,0xa1,0x7c,0x59,0x84,0xf8,0x25, 0xb2,0x6f,0x13,0xce,0xeb,0x36,0x4a,0x97,
        0x00,0x40,0x80,0xc0,0x1b,0x5b,0x9b,0xdb, 0x36,0x76,0xb6,0xf6,0x2d,0x6d,0xad,0xed, 0x00,0x6c,0xd8,0xb4,0xab,0xc7,0x73,0x1f, 0x4d,0x21,0x95,0xf9,0xe6,0x8a,0x3e,0x52,
        0x00,0x41,0x82,0xc3,0x1f,0x5e,0x9d,0xdc, 0x3e,0x7f,0xbc,0xfd,0x21,0x60,0xa3,0xe2, 0x00,0x7c,0xf8,0x84,0xeb,0x97,0x13,0x6f, 0xcd,0xb1,0x35,0x49,0x26,0x5a,0xde,0xa2,
        0x00,0x42,0x84,0xc6,0x13,0x51,0x97,0xd5, 0x26,0x64,0xa2,0xe0,0x35,0x77,0xb1,0xf3, 0x00,0x4c,0x98,0xd4,0x2b,0x67,0xb3,0xff, 0x56,0x1a,0xce,0x82,0x7d,0x31,0xe5,0xa9,
        0x00,0x43,0x86,0xc5,0x17,0x54,0x91,0xd2, 0x2e,0x6d,0xa8,0xeb,0x39,0x7a,0xbf,0xfc, 0x00,0x5c,0xb8,0xe4,0x6b,0x37,0xd3,0x8f, 0xd6,0x8a,0x6e,0x32,0xbd,0xe1,0x05,0x59,
        0x00,0x44,0x88,0xcc,0x0b,0x4f,0x83,0xc7, 0x16,0x52,0x9e,0xda,0x1d,0x59,0x95,0xd1, 0x00,0x2c,0x58,0x74,0xb0,0x9c,0xe8,0xc4, 0x7b,0x57,0x23,0x0f,0xcb,0xe7,0x93,0xbf,
        0x00,0x45,0x8a,0xcf,0x0f,0x4a,0x85,0xc0, 0x1e,0x5b,0x94,0xd1,0x11,0x54,0x9b,0xde, 0x00,0x3c,0x78,0x44,0xf0,0xcc,0x88,0xb4, 0xfb,0xc7,0x83,0xbf,0x0b,0x37,0x73,0x4f,
        0x00,0x46,0x8c,0xca,0x03,0x45,0x8f,0xc9, 0x06,0x40,0x8a,0xcc,0x05,0x43,0x89,0xcf, 0x00,0x0c,0x18,0x14,0x30,0x3c,0x28,0x24, 0x60,0x6c,0x78,0x74,0x50,0x5c,0x48,0x44,
        0x00,0x47,0x8e,0xc9,0x07,0x40,0x89,0xce, 0x0e,0x49,0x80,0xc7,0x09,0x4e,0x87,0xc0, 0x00,0x1c,0x38,0x24,0x70,0x6c,0x48,0x54, 0xe0,0xfc,0xd8,0xc4,0x90,0x8c,0xa8,0xb4,
        0x00,0x48,0x90,0xd8,0x3b,0x73,0xab,0xe3, 0x76,0x3e,0xe6,0xae,0x4d,0x05,0xdd,0x95, 0x00,0xec,0xc3,0x2f,0x9d,0x71,0x5e,0xb2, 0x21,0xcd,0xe2,0x0e,0xbc,0x50,0x7f,0x93,
        0x00,0x49,0x92,0xdb,0x3f,0x76,0xad,0xe4, 0x7e,0x37,0xec,0xa5,0x41,0x08,0xd3,0x9a, 0x00,0xfc,0xe3,0x1f,0xdd,0x21,0x3e,0xc2, 0xa1,0x5d,0x42,0xbe,0x7c,0x80,0x9f,0x63,
        0x00,0x4a,0x94,0xde,0x33,0x79,0xa7,0xed, 0x66,0x2c,0xf2,0xb8,0x55,0x1f,0xc1,0x8b, 0x00,0xcc,0x83,0x4f,0x1d,0xd1,0x9e,0x52, 0x3a,0xf6,0xb9,0x75,0x27,0xeb,0xa4,0x68,
        0x00,0x4b,0x96,0xdd,0x37,0x7c,0xa1,0xea, 0x6e,0x25,0xf8,0xb3,0x59,0x12,0xcf,0x84, 0x00,0xdc,0xa3,0x7f,0x5d,0x81,0xfe,0x22, 0xba,0x66,0x19,0xc5,0xe7,0x3b,0x44,0x98,
        0x00,0x4c,0x98,0xd4,0x2b,0x67,0xb3,0xff, 0x56,0x1a,0xce,0x82,0x7d,0x31,0xe5,0xa9, 0x00,0xac,0x43,0xef,0x86,0x2a,0xc5,0x69, 0x17,0xbb,0x54,0xf8,0x91,0x3d,0xd2,0x7e,
        0x00,0x4d,0x9a,0xd7,0x2f,0x62,0xb5,0xf8, 0x5e,0x13,0xc4,0x89,0x71,0x3c,0xeb,0xa6, 0x00,0xbc,0x63,0xdf,0xc6,0x7a,0xa5,0x19, 0x97,0x2b,0xf4,0x48,0x51,0xed,0x32,0x8e,
        0x00,0x4e,0x9c,0xd2,0x23,0x6d,0xbf,0xf1, 0x46,0x08,0xda,0x94,0x65,0x2b,0xf9,0xb7, 0x00,0x8c,0x03,0x8f,0x06,0x8a,0x05,0x89, 0x0c,0x80,0x0f,0x83,0x0a,0x86,0x09,0x85,
        0x00,0x4f,0x9e,0xd1,0x27,0x68,0xb9,0xf6, 0x4e,0x01,0xd0,0x9f,0x69,0x26,0xf7,0xb8, 0x00,0x9c,0x23,0xbf,0x46,0xda,0x65,0xf9, 0x8c,0x10,0xaf,0x33,0xca,0x56,0xe9,0x75,
        0x00,0x50,0xa0,0xf0,0x5b,0x0b,0xfb,0xab, 0xb6,0xe6,0x16,0x46,0xed,0xbd,0x4d,0x1d, 0x00,0x77,0xee,0x99,0xc7,0xb0,0x29,0x5e, 0x95,0xe2,0x7b,0x0c,0x52,0x25,0xbc,0xcb,
        0x00,0x51,0xa2,0xf3,0x5f,0x0e,0xfd,0xac, 0xbe,0xef,0x1c,0x4d,0xe1,0xb0,0x43,0x12, 0x00,0x67,0xce,0xa9,0x87,0xe0,0x49,0x2e, 0x15,0x72,0xdb,0xbc,0x92,0xf5,0x5c,0x3b,
        0x00,0x52,0xa4,0xf6,0x53,0x01,0xf7,0xa5, 0xa6,0xf4,0x02,0x50,0xf5,0xa7,0x51,0x03, 0x00,0x57,0xae,0xf9,0x47,0x10,0xe9,0xbe, 0x8e,0xd9,0x20,0x77,0xc9,0x9e,0x67,0x30,
        0x00,0x53,0xa6,0xf5,0x57,0x04,0xf1,0xa2, 0xae,0xfd,0x08,0x5b,0xf9,0xaa,0x5f,0x0c, 0x00,0x47,0x8e,0xc9,0x07,0x40,0x89,0xce, 0x0e,0x49,0x80,0xc7,0x09,0x4e,0x87,0xc0,
        0x00,0x54,0xa8,0xfc,0x4b,0x1f,0xe3,0xb7, 0x96,0xc2,0x3e,0x6a,0xdd,0x89,0x75,0x21, 0x00,0x37,0x6e,0x59,0xdc,0xeb,0xb2,0x85, 0xa3,0x94,0xcd,0xfa,0x7f,0x48,0x11,0x26,
        0x00,0x55,0xaa,0xff,0x4f,0x1a,0xe5,0xb0, 0x9e,0xcb,0x34,0x61,0xd1,0x84,0x7b,0x2e, 0x00,0x27,0x4e,0x69,0x9c,0xbb,0xd2,0xf5, 0x23,0x04,0x6d,0x4a,0xbf,0x98,0xf1,0xd6,
        0x00,0x56,0xac,0xfa,0x43,0x15,0xef,0xb9, 0x86,0xd0,0x2a,0x7c,0xc5,0x93,0x69,0x3f, 0x00,0x17,0x2e,0x39,0x5c,0x4b,0x72,0x65, 0xb8,0xaf,0x96,0x81,0xe4,0xf3,0xca,0xdd,
        0x00,0x57,0xae,0xf9,0x47,0x10,0xe9,0xbe, 0x8e,0xd9,0x20,0x77,0xc9,0x9e,0x67,0x30, 0x00,0x07,0x0e,0x09,0x1c,0x1b,0x12,0x15, 0x38,0x3f,0x36,0x31,0x24,0x23,0x2a,0x2d,
        0x00,0x58,0xb0,0xe8,0x7b,0x23,0xcb,0x93, 0xf6,0xae,0x46,0x1e,0x8d,0xd5,0x3d,0x65, 0x00,0xf7,0xf5,0x02,0xf1,0x06,0x04,0xf3, 0xf9,0x0e,0x0c,0xfb,0x08,0xff,0xfd,0x0a,
        0x00,0x59,0xb2,0xeb,0x7f,0x26,0xcd,0x94, 0xfe,0xa7,0x4c,0x15,0x81,0xd8,0x33,0x6a, 0x00,0xe7,0xd5,0x32,0xb1,0x56,0x64,0x83, 0x79,0x9e,0xac,0x4b,0xc8,0x2f,0x1d,0xfa,
        0x00,0x5a,0xb4,0xee,0x73,0x29,0xc7,0x9d, 0xe6,0xbc,0x52,0x08,0x95,0xcf,0x21,0x7b, 0x00,0xd7,0xb5,0x62,0x71,0xa6,0xc4,0x13, 0xe2,0x35,0x57,0x80,0x93,0x44,0x26,0xf1,
        0x00,0x5b,0xb6,0xed,0x77,0x2c,0xc1,0x9a, 0xee,0xb5,0x58,0x03,0x99,0xc2,0x2f,0x74, 0x00,0xc7,0x95,0x52,0x31,0xf6,0xa4,0x63, 0x62,0xa5,0xf7,0x30,0x53,0x94,0xc6,0x01,
        0x00,0x5c,0xb8,0xe4,0x6b,0x37,0xd3,0x8f, 0xd6,0x8a,0x6e,0x32,0xbd,0xe1,0x05,0x59, 0x00,0xb7,0x75,0xc2,0xea,0x5d,0x9f,0x28, 0xcf,0x78,0xba,0x0d,0x25,0x92,0x50,0xe7,
        0x00,0x5d,0xba,0xe7,0x6f,0x32,0xd5,0x88, 0xde,0x83,0x64,0x39,0xb1,0xec,0x0b,0x56, 0x00,0xa7,0x55,0xf2,0xaa,0x0d,0xff,0x58, 0x4f,0xe8,0x1a,0xbd,0xe5,0x42,0xb0,0x17,
        0x00,0x5e,0xbc,0xe2,0x63,0x3d,0xdf,0x81, 0xc6,0x98,0x7a,0x24,0xa5,0xfb,0x19,0x47, 0x00,0x97,0x35,0xa2,0x6a,0xfd,0x5f,0xc8, 0xd4,0x43,0xe1,0x76,0xbe,0x29,0x8b,0x1c,
        0x00,0x5f,0xbe,0xe1,0x67,0x38,0xd9,0x86, 0xce,0x91,0x70,0x2f,0xa9,0xf6,0x17,0x48, 0x00,0x87,0x15,0x92,0x2a,0xad,0x3f,0xb8, 0x54,0xd3,0x41,0xc6,0x7e,0xf9,0x6b,0xec,
        0x00,0x60,0xc0,0xa0,0x9b,0xfb,0x5b,0x3b, 0x2d,0x4d,0xed,0x8d,0xb6,0xd6,0x76,0x16, 0x00,0x5a,0xb4,0xee,0x73,0x29,0xc7,0x9d, 0xe6,0xbc,0x52,0x08,0x95,0xcf,0x21,0x7b,
        0x00,0x61,0xc2,0xa3,0x9f,0xfe,0x5d,0x3c, 0x25,0x44,0xe7,0x86,0xba,0xdb,0x78,0x19, 0x00,0x4a,0x94,0xde,0x33,0x79,0xa7,0xed, 0x66,0x2c,0xf2,0xb8,0x55,0x1f,0xc1,0x8b,
        0x00,0x62,0xc4,0xa6,0x93,0xf1,0x57,0x35, 0x3d,0x5f,0xf9,0x9b,0xae,0xcc,0x6a,0x08, 0x00,0x7a,0xf4,0x8e,0xf3,0x89,0x07,0x7d, 0xfd,0x87,0x09,0x73,0x0e,0x74,0xfa,0x80,
        0x00,0x63,0xc6,0xa5,0x97,0xf4,0x51,0x32, 0x35,0x56,0xf3,0x90,0xa2,0xc1,0x64,0x07, 0x00,0x6a,0xd4,0xbe,0xb3,0xd9,0x67,0x0d, 0x7d,0x17,0xa9,0xc3,0xce,0xa4,0x1a,0x70,
        0x00,0x64,0xc8,0xac,0x8b,0xef,0x43,0x27, 0x0d,0x69,0xc5,0xa1,0x86,0xe2,0x4e,0x2a, 0x00,0x1a,0x34,0x2e,0x68,0x72,0x5c,0x46, 0xd0,0xca,0xe4,0xfe,0xb8,0xa2,0x8c,0x96,
        0x00,0x65,0xca,0xaf,0x8f,0xea,0x45,0x20, 0x05,0x60,0xcf,0xaa,0x8a,0xef,0x40,0x25, 0x00,0x0a,0x14,0x1e,0x28,0x22,0x3c,0x36, 0x50,0x5a,0x44,0x4e,0x78,0x72,0x6c,0x66,
        0x00,0x66,0xcc,0xaa,0x83,0xe5,0x4f,0x29, 0x1d,0x7b,0xd1,0xb7,0x9e,0xf8,0x52,0x34, 0x00,0x3a,0x74,0x4e,0xe8,0xd2,0x9c,0xa6, 0xcb,0xf1,0xbf,0x85,0x23,0x19,0x57,0x6d,
        0x00,0x67,0xce,0xa9,0x87,0xe0,0x49,0x2e, 0x15,0x72,0xdb,0xbc,0x92,0xf5,0x5c,0x3b, 0x00,0x2a,0x54,0x7e,0xa8,0x82,0xfc,0xd6, 0x4b,0x61,0x1f,0x35,0xe3,0xc9,0xb7,0x9d,
        0x00,0x68,0xd0,0xb8,0xbb,0xd3,0x6b,0x03, 0x6d,0x05,0xbd,0xd5,0xd6,0xbe,0x06,0x6e, 0x00,0xda,0xaf,0x75,0x45,0x9f,0xea,0x30, 0x8a,0x50,0x25,0xff,0xcf,0x15,0x60,0xba,
        0x00,0x69,0xd2,0xbb,0xbf,0xd6,0x6d,0x04, 0x65,0x0c,0xb7,0xde,0xda,0xb3,0x08,0x61, 0x00,0xca,0x8f,0x45,0x05,0xcf,0x8a,0x40, 0x0a,0xc0,0x85,0x4f,0x0f,0xc5,0x80,0x4a,
        0x00,0x6a,0xd4,0xbe,0xb3,0xd9,0x67,0x0d, 0x7d,0x17,0xa9,0xc3,0xce,0xa4,0x1a,0x70, 0x00,0xfa,0xef,0x15,0xc5,0x3f,0x2a,0xd0, 0x91,0x6b,0x7e,0x84,0x54,0xae,0xbb,0x41,
        0x00,0x6b,0xd6,0xbd,0xb7,0xdc,0x61,0x0a, 0x75,0x1e,0xa3,0xc8,0xc2,0xa9,0x14,0x7f, 0x00,0xea,0xcf,0x25,0x85,0x6f,0x4a,0xa0, 0x11,0xfb,0xde,0x34,0x94,0x7e,0x5b,0xb1,
        0x00,0x6c,0xd8,0xb4,0xab,0xc7,0x73,0x1f, 0x4d,0x21,0x95,0xf9,0xe6,0x8a,0x3e,0x52, 0x00,0x9a,0x2f,0xb5,0x5e,0xc4,0x71,0xeb, 0xbc,0x26,0x93,0x09,0xe2,0x78,0xcd,0x57,
        0x00,0x6d,0xda,0xb7,0xaf,0xc2,0x75,0x18, 0x45,0x28,0x9f,0xf2,0xea,0x87,0x30,0x5d, 0x00,0x8a,0x0f,0x85,0x1e,0x94,0x11,0x9b, 0x3c,0xb6,0x33,0xb9,0x22,0xa8,0x2d,0xa7,
        0x00,0x6e,0xdc,0xb2,0xa3,0xcd,0x7f,0x11, 0x5d,0x33,0x81,0xef,0xfe,0x90,0x22,0x4c, 0x00,0xba,0x6f,0xd5,0xde,0x64,0xb1,0x0b, 0xa7,0x1d,0xc8,0x72,0x79,0xc3,0x16,0xac,
        0x00,0x6f,0xde,0xb1,0xa7,0xc8,0x79,0x16, 0x55,0x3a,0x8b,0xe4,0xf2,0x9d,0x2c,0x43, 0x00,0xaa,0x4f,0xe5,0x9e,0x34,0xd1,0x7b, 0x27,0x8d,0x68,0xc2,0xb9,0x13,0xf6,0x5c,
        0x00,0x70,0xe0,0x90,0xdb,0xab,0x3b,0x4b, 0xad,0xdd,0x4d,0x3d,0x76,0x06,0x96,0xe6, 0x00,0x41,0x82,0xc3,0x1f,0x5e,0x9d,0xdc, 0x3e,0x7f,0xbc,0xfd,0x21,0x60,0xa3,0xe2,
        0x00,0x71,0xe2,0x93,0xdf,0xae,0x3d,0x4c, 0xa5,0xd4,0x47,0x36,0x7a,0x0b,0x98,0xe9, 0x00,0x51,0xa2,0xf3,0x5f,0x0e,0xfd,0xac, 0xbe,0xef,0x1c,0x4d,0xe1,0xb0,0x43,0x12,
        0x00,0x72,0xe4,0x96,0xd3,0xa1,0x37,0x45, 0xbd,0xcf,0x59,0x2b,0x6e,0x1c,0x8a,0xf8, 0x00,0x61,0xc2,0xa3,0x9f,0xfe,0x5d,0x3c, 0x25,0x44,0xe7,0x86,0xba,0xdb,0x78,0x19,
        0x00,0x73,0xe6,0x95,0xd7,0xa4,0x31,0x42, 0xb5,0xc6,0x53,0x20,0x62,0x11,0x84,0xf7, 0x00,0x71,0xe2,0x93,0xdf,0xae,0x3d,0x4c, 0xa5,0xd4,0x47,0x36,0x7a,0x0b,0x98,0xe9,
        0x00,0x74,0xe8,0x9c,0xcb,0xbf,0x23,0x57, 0x8d,0xf9,0x65,0x11,0x46,0x32,0xae,0xda, 0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07, 0x08,0x09,0x0a,0x0b,0x0c,0x0d,0x0e,0x0f,
        0x00,0x75,0xea,0x9f,0xcf,0xba,0x25,0x50, 0x85,0xf0,0x6f,0x1a,0x4a,0x3f,0xa0,0xd5, 0x00,0x11,0x22,0x33,0x44,0x55,0x66,0x77, 0x88,0x99,0xaa,0xbb,0xcc,0xdd,0xee,0xff,
        0x00,0x76,0xec,0x9a,0xc3,0xb5,0x2f,0x59, 0x9d,0xeb,0x71,0x07,0x5e,0x28,0xb2,0xc4, 0x00,0x21,0x42,0x63,0x84,0xa5,0xc6,0xe7, 0x13,0x32,0x51,0x70,0x97,0xb6,0xd5,0xf4,
        0x00,0x77,0xee,0x99,0xc7,0xb0,0x29,0x5e, 0x95,0xe2,0x7b,0x0c,0x52,0x25,0xbc,0xcb, 0x00,0x31,0x62,0x53,0xc4,0xf5,0xa6,0x97, 0x93,0xa2,0xf1,0xc0,0x57,0x66,0x35,0x04,
        0x00,0x78,0xf0,0x88,0xfb,0x83,0x0b,0x73, 0xed,0x95,0x1d,0x65,0x16,0x6e,0xe6,0x9e, 0x00,0xc1,0x99,0x58,0x29,0xe8,0xb0,0x71, 0x52,0x93,0xcb,0x0a,0x7b,0xba,0xe2,0x23,
        0x00,0x79,0xf2,0x8b,0xff,0x86,0x0d,0x74, 0xe5,0x9c,0x17,0x6e,0x1a,0x63,0xe8,0x91, 0x00,0xd1,0xb9,0x68,0x69,0xb8,0xd0,0x01, 0xd2,0x03,0x6b,0xba,0xbb,0x6a,0x02,0xd3,
        0x00,0x7a,0xf4,0x8e,0xf3,0x89,0x07,0x7d, 0xfd,0x87,0x09,0x73,0x0e,0x74,0xfa,0x80, 0x00,0xe1,0xd9,0x38,0xa9,0x48,0x70,0x91, 0x49,0xa8,0x90,0x71,0xe0,0x01,0x39,0xd8,
        0x00,0x7b,0xf6,0x8d,0xf7,0x8c,0x01,0x7a, 0xf5,0x8e,0x03,0x78,0x02,0x79,0xf4,0x8f, 0x00,0xf1,0xf9,0x08,0xe9,0x18,0x10,0xe1, 0xc9,0x38,0x30,0xc1,0x20,0xd1,0xd9,0x28,
        0x00,0x7c,0xf8,0x84,0xeb,0x97,0x13,0x6f, 0xcd,0xb1,0x35,0x49,0x26,0x5a,0xde,0xa2, 0x00,0x81,0x19,0x98,0x32,0xb3,0x2b,0xaa, 0x64,0xe5,0x7d,0xfc,0x56,0xd7,0x4f,0xce,
        0x00,0x7d,0xfa,0x87,0xef,0x92,0x15,0x68, 0xc5,0xb8,0x3f,0x42,0x2a,0x57,0xd0,0xad, 0x00,0x91,0x39,0xa8,0x72,0xe3,0x4b,0xda, 0xe4,0x75,0xdd,0x4c,0x96,0x07,0xaf,0x3e,
        0x00,0x7e,0xfc,0x82,0xe3,0x9d,0x1f,0x61, 0xdd,0xa3,0x21,0x5f,0x3e,0x40,0xc2,0xbc, 0x00,0xa1,0x59,0xf8,0xb2,0x13,0xeb,0x4a, 0x7f,0xde,0x26,0x87,0xcd,0x6c,0x94,0x35,
        0x00,0x7f,0xfe,0x81,0xe7,0x98,0x19,0x66, 0xd5,0xaa,0x2b,0x54,0x32,0x4d,0xcc,0xb3, 0x00,0xb1,0x79,0xc8,0xf2,0x43,0x8b,0x3a, 0xff,0x4e,0x86,0x37,0x0d,0xbc,0x74,0xc5,
        0x00,0x80,0x1b,0x9b,0x36,0xb6,0x2d,0xad, 0x6c,0xec,0x77,0xf7,0x5a,0xda,0x41,0xc1, 0x00,0xd8,0xab,0x73,0x4d,0x95,0xe6,0x3e, 0x9a,0x42,0x31,0xe9,0xd7,0x0f,0x7c,0xa4,
        0x00,0x81,0x19,0x98,0x32,0xb3,0x2b,0xaa, 0x64,0xe5,0x7d,0xfc,0x56,0xd7,0x4f,0xce, 0x00,0xc8,0x8b,0x43,0x0d,0xc5,0x86,0x4e, 0x1a,0xd2,0x91,0x59,0x17,0xdf,0x9c,0x54,
        0x00,0x82,0x1f,0x9d,0x3e,0xbc,0x21,0xa3, 0x7c,0xfe,0x63,0xe1,0x42,0xc0,0x5d,0xdf, 0x00,0xf8,0xeb,0x13,0xcd,0x35,0x26,0xde, 0x81,0x79,0x6a,0x92,0x4c,0xb4,0xa7,0x5f,
        0x00,0x83,0x1d,0x9e,0x3a,0xb9,0x27,0xa4, 0x74,0xf7,0x69,0xea,0x4e,0xcd,0x53,0xd0, 0x00,0xe8,0xcb,0x23,0x8d,0x65,0x46,0xae, 0x01,0xe9,0xca,0x22,0x8c,0x64,0x47,0xaf,
        0x00,0x84,0x13,0x97,0x26,0xa2,0x35,0xb1, 0x4c,0xc8,0x5f,0xdb,0x6a,0xee,0x79,0xfd, 0x00,0x98,0x2b,0xb3,0x56,0xce,0x7d,0xe5, 0xac,0x34,0x87,0x1f,0xfa,0x62,0xd1,0x49,
        0x00,0x85,0x11,0x94,0x22,0xa7,0x33,0xb6, 0x44,0xc1,0x55,0xd0,0x66,0xe3,0x77,0xf2, 0x00,0x88,0x0b,0x83,0x16,0x9e,0x1d,0x95, 0x2c,0xa4,0x27,0xaf,0x3a,0xb2,0x31,0xb9,
        0x00,0x86,0x17,0x91,0x2e,0xa8,0x39,0xbf, 0x5c,0xda,0x4b,0xcd,0x72,0xf4,0x65,0xe3, 0x00,0xb8,0x6b,0xd3,0xd6,0x6e,0xbd,0x05, 0xb7,0x0f,0xdc,0x64,0x61,0xd9,0x0a,0xb2,
        0x00,0x87,0x15,0x92,0x2a,0xad,0x3f,0xb8, 0x54,0xd3,0x41,0xc6,0x7e,0xf9,0x6b,0xec, 0x00,0xa8,0x4b,0xe3,0x96,0x3e,0xdd,0x75, 0x37,0x9f,0x7c,0xd4,0xa1,0x09,0xea,0x42,
        0x00,0x88,0x0b,0x83,0x16,0x9e,0x1d,0x95, 0x2c,0xa4,0x27,0xaf,0x3a,0xb2,0x31,0xb9, 0x00,0x58,0xb0,0xe8,0x7b,0x23,0xcb,0x93, 0xf6,0xae,0x46,0x1e,0x8d,0xd5,0x3d,0x65,
        0x00,0x89,0x09,0x80,0x12,0x9b,0x1b,0x92, 0x24,0xad,0x2d,0xa4,0x36,0xbf,0x3f,0xb6, 0x00,0x48,0x90,0xd8,0x3b,0x73,0xab,0xe3, 0x76,0x3e,0xe6,0xae,0x4d,0x05,0xdd,0x95,
        0x00,0x8a,0x0f,0x85,0x1e,0x94,0x11,0x9b, 0x3c,0xb6,0x33,0xb9,0x22,0xa8,0x2d,0xa7, 0x00,0x78,0xf0,0x88,0xfb,0x83,0x0b,0x73, 0xed,0x95,0x1d,0x65,0x16,0x6e,0xe6,0x9e,
        0x00,0x8b,0x0d,0x86,0x1a,0x91,0x17,0x9c, 0x34,0xbf,0x39,0xb2,0x2e,0xa5,0x23,0xa8, 0x00,0x68,0xd0,0xb8,0xbb,0xd3,0x6b,0x03, 0x6d,0x05,0xbd,0xd5,0xd6,0xbe,0x06,0x6e,
        0x00,0x8c,0x03,0x8f,0x06,0x8a,0x05,0x89, 0x0c,0x80,0x0f,0x83,0x0a,0x86,0x09,0x85, 0x00,0x18,0x30,0x28,0x60,0x78,0x50,0x48, 0xc0,0xd8,0xf0,0xe8,0xa0,0xb8,0x90,0x88,
        0x00,0x8d,0x01,0x8c,0x02,0x8f,0x03,0x8e, 0x04,0x89,0x05,0x88,0x06,0x8b,0x07,0x8a, 0x00,0x08,0x10,0x18,0x20,0x28,0x30,0x38, 0x40,0x48,0x50,0x58,0x60,0x68,0x70,0x78,
        0x00,0x8e,0x07,0x89,0x0e,0x80,0x09,0x87, 0x1c,0x92,0x1b,0x95,0x12,0x9c,0x15,0x9b, 0x00,0x38,0x70,0x48,0xe0,0xd8,0x90,0xa8, 0xdb,0xe3,0xab,0x93,0x3b,0x03,0x4b,0x73,
        0x00,0x8f,0x05,0x8a,0x0a,0x85,0x0f,0x80, 0x14,0x9b,0x11,0x9e,0x1e,0x91,0x1b,0x94, 0x00,0x28,0x50,0x78,0xa0,0x88,0xf0,0xd8, 0x5b,0x73,0x0b,0x23,0xfb,0xd3,0xab,0x83,
        0x00,0x90,0x3b,0xab,0x76,0xe6,0x4d,0xdd, 0xec,0x7c,0xd7,0x47,0x9a,0x0a,0xa1,0x31, 0x00,0xc3,0x9d,0x5e,0x21,0xe2,0xbc,0x7f, 0x42,0x81,0xdf,0x1c,0x63,0xa0,0xfe,0x3d,
        0x00,0x91,0x39,0xa8,0x72,0xe3,0x4b,0xda, 0xe4,0x75,0xdd,0x4c,0x96,0x07,0xaf,0x3e, 0x00,0xd3,0xbd,0x6e,0x61,0xb2,0xdc,0x0f, 0xc2,0x11,0x7f,0xac,0xa3,0x70,0x1e,0xcd,
        0x00,0x92,0x3f,0xad,0x7e,0xec,0x41,0xd3, 0xfc,0x6e,0xc3,0x51,0x82,0x10,0xbd,0x2f, 0x00,0xe3,0xdd,0x3e,0xa1,0x42,0x7c,0x9f, 0x59,0xba,0x84,0x67,0xf8,0x1b,0x25,0xc6,
        0x00,0x93,0x3d,0xae,0x7a,0xe9,0x47,0xd4, 0xf4,0x67,0xc9,0x5a,0x8e,0x1d,0xb3,0x20, 0x00,0xf3,0xfd,0x0e,0xe1,0x12,0x1c,0xef, 0xd9,0x2a,0x24,0xd7,0x38,0xcb,0xc5,0x36,
        0x00,0x94,0x33,0xa7,0x66,0xf2,0x55,0xc1, 0xcc,0x58,0xff,0x6b,0xaa,0x3e,0x99,0x0d, 0x00,0x83,0x1d,0x9e,0x3a,0xb9,0x27,0xa4, 0x74,0xf7,0x69,0xea,0x4e,0xcd,0x53,0xd0,
        0x00,0x95,0x31,0xa4,0x62,0xf7,0x53,0xc6, 0xc4,0x51,0xf5,0x60,0xa6,0x33,0x97,0x02, 0x00,0x93,0x3d,0xae,0x7a,0xe9,0x47,0xd4, 0xf4,0x67,0xc9,0x5a,0x8e,0x1d,0xb3,0x20,
        0x00,0x96,0x37,0xa1,0x6e,0xf8,0x59,0xcf, 0xdc,0x4a,0xeb,0x7d,0xb2,0x24,0x85,0x13, 0x00,0xa3,0x5d,0xfe,0xba,0x19,0xe7,0x44, 0x6f,0xcc,0x32,0x91,0xd5,0x76,0x88,0x2b,
        0x00,0x97,0x35,0xa2,0x6a,0xfd,0x5f,0xc8, 0xd4,0x43,0xe1,0x76,0xbe,0x29,0x8b,0x1c, 0x00,0xb3,0x7d,0xce,0xfa,0x49,0x87,0x34, 0xef,0x5c,0x92,0x21,0x15,0xa6,0x68,0xdb,
        0x00,0x98,0x2b,0xb3,0x56,0xce,0x7d,0xe5, 0xac,0x34,0x87,0x1f,0xfa,0x62,0xd1,0x49, 0x00,0x43,0x86,0xc5,0x17,0x54,0x91,0xd2, 0x2e,0x6d,0xa8,0xeb,0x39,0x7a,0xbf,0xfc,
        0x00,0x99,0x29,0xb0,0x52,0xcb,0x7b,0xe2, 0xa4,0x3d,0x8d,0x14,0xf6,0x6f,0xdf,0x46, 0x00,0x53,0xa6,0xf5,0x57,0x04,0xf1,0xa2, 0xae,0xfd,0x08,0x5b,0xf9,0xaa,0x5f,0x0c,
        0x00,0x9a,0x2f,0xb5,0x5e,0xc4,0x71,0xeb, 0xbc,0x26,0x93,0x09,0xe2,0x78,0xcd,0x57, 0x00,0x63,0xc6,0xa5,0x97,0xf4,0x51,0x32, 0x35,0x56,0xf3,0x90,0xa2,0xc1,0x64,0x07,
        0x00,0x9b,0x2d,0xb6,0x5a,0xc1,0x77,0xec, 0xb4,0x2f,0x99,0x02,0xee,0x75,0xc3,0x58, 0x00,0x73,0xe6,0x95,0xd7,0xa4,0x31,0x42, 0xb5,0xc6,0x53,0x20,0x62,0x11,0x84,0xf7,
        0x00,0x9c,0x23,0xbf,0x46,0xda,0x65,0xf9, 0x8c,0x10,0xaf,0x33,0xca,0x56,0xe9,0x75, 0x00,0x03,0x06,0x05,0x0c,0x0f,0x0a,0x09, 0x18,0x1b,0x1e,0x1d,0x14,0x17,0x12,0x11,
        0x00,0x9d,0x21,0xbc,0x42,0xdf,0x63,0xfe, 0x84,0x19,0xa5,0x38,0xc6,0x5b,0xe7,0x7a, 0x00,0x13,0x26,0x35,0x4c,0x5f,0x6a,0x79, 0x98,0x8b,0xbe,0xad,0xd4,0xc7,0xf2,0xe1,
        0x00,0x9e,0x27,0xb9,0x4e,0xd0,0x69,0xf7, 0x9c,0x02,0xbb,0x25,0xd2,0x4c,0xf5,0x6b, 0x00,0x23,0x46,0x65,0x8c,0xaf,0xca,0xe9, 0x03,0x20,0x45,0x66,0x8f,0xac,0xc9,0xea,
        0x00,0x9f,0x25,0xba,0x4a,0xd5,0x6f,0xf0, 0x94,0x0b,0xb1,0x2e,0xde,0x41,0xfb,0x64, 0x00,0x33,0x66,0x55,0xcc,0xff,0xaa,0x99, 0x83,0xb0,0xe5,0xd6,0x4f,0x7c,0x29,0x1a,
        0x00,0xa0,0x5b,0xfb,0xb6,0x16,0xed,0x4d, 0x77,0xd7,0x2c,0x8c,0xc1,0x61,0x9a,0x3a, 0x00,0xee,0xc7,0x29,0x95,0x7b,0x52,0xbc, 0x31,0xdf,0xf6,0x18,0xa4,0x4a,0x63,0x8d,
        0x00,0xa1,0x59,0xf8,0xb2,0x13,0xeb,0x4a, 0x7f,0xde,0x26,0x87,0xcd,0x6c,0x94,0x35, 0x00,0xfe,0xe7,0x19,0xd5,0x2b,0x32,0xcc, 0xb1,0x4f,0x56,0xa8,0x64,0x9a,0x83,0x7d,
        0x00,0xa2,0x5f,0xfd,0xbe,0x1c,0xe1,0x43, 0x67,0xc5,0x38,0x9a,0xd9,0x7b,0x86,0x24, 0x00,0xce,0x87,0x49,0x15,0xdb,0x92,0x5c, 0x2a,0xe4,0xad,0x63,0x3f,0xf1,0xb8,0x76,
        0x00,0xa3,0x5d,0xfe,0xba,0x19,0xe7,0x44, 0x6f,0xcc,0x32,0x91,0xd5,0x76,0x88,0x2b, 0x00,0xde,0xa7,0x79,0x55,0x8b,0xf2,0x2c, 0xaa,0x74,0x0d,0xd3,0xff,0x21,0x58,0x86,
        0x00,0xa4,0x53,0xf7,0xa6,0x02,0xf5,0x51, 0x57,0xf3,0x04,0xa0,0xf1,0x55,0xa2,0x06, 0x00,0xae,0x47,0xe9,0x8e,0x20,0xc9,0x67, 0x07,0xa9,0x40,0xee,0x89,0x27,0xce,0x60,
        0x00,0xa5,0x51,0xf4,0xa2,0x07,0xf3,0x56, 0x5f,0xfa,0x0e,0xab,0xfd,0x58,0xac,0x09, 0x00,0xbe,0x67,0xd9,0xce,0x70,0xa9,0x17, 0x87,0x39,0xe0,0x5e,0x49,0xf7,0x2e,0x90,
        0x00,0xa6,0x57,0xf1,0xae,0x08,0xf9,0x5f, 0x47,0xe1,0x10,0xb6,0xe9,0x4f,0xbe,0x18, 0x00,0x8e,0x07,0x89,0x0e,0x80,0x09,0x87, 0x1c,0x92,0x1b,0x95,0x12,0x9c,0x15,0x9b,
        0x00,0xa7,0x55,0xf2,0xaa,0x0d,0xff,0x58, 0x4f,0xe8,0x1a,0xbd,0xe5,0x42,0xb0,0x17, 0x00,0x9e,0x27,0xb9,0x4e,0xd0,0x69,0xf7, 0x9c,0x02,0xbb,0x25,0xd2,0x4c,0xf5,0x6b,
        0x00,0xa8,0x4b,0xe3,0x96,0x3e,0xdd,0x75, 0x37,0x9f,0x7c,0xd4,0xa1,0x09,0xea,0x42, 0x00,0x6e,0xdc,0xb2,0xa3,0xcd,0x7f,0x11, 0x5d,0x33,0x81,0xef,0xfe,0x90,0x22,0x4c,
        0x00,0xa9,0x49,0xe0,0x92,0x3b,0xdb,0x72, 0x3f,0x96,0x76,0xdf,0xad,0x04,0xe4,0x4d, 0x00,0x7e,0xfc,0x82,0xe3,0x9d,0x1f,0x61, 0xdd,0xa3,0x21,0x5f,0x3e,0x40,0xc2,0xbc,
        0x00,0xaa,0x4f,0xe5,0x9e,0x34,0xd1,0x7b, 0x27,0x8d,0x68,0xc2,0xb9,0x13,0xf6,0x5c, 0x00,0x4e,0x9c,0xd2,0x23,0x6d,0xbf,0xf1, 0x46,0x08,0xda,0x94,0x65,0x2b,0xf9,0xb7,
        0x00,0xab,0x4d,0xe6,0x9a,0x31,0xd7,0x7c, 0x2f,0x84,0x62,0xc9,0xb5,0x1e,0xf8,0x53, 0x00,0x5e,0xbc,0xe2,0x63,0x3d,0xdf,0x81, 0xc6,0x98,0x7a,0x24,0xa5,0xfb,0x19,0x47,
        0x00,0xac,0x43,0xef,0x86,0x2a,0xc5,0x69, 0x17,0xbb,0x54,0xf8,0x91,0x3d,0xd2,0x7e, 0x00,0x2e,0x5c,0x72,0xb8,0x96,0xe4,0xca, 0x6b,0x45,0x37,0x19,0xd3,0xfd,0x8f,0xa1,
        0x00,0xad,0x41,0xec,0x82,0x2f,0xc3,0x6e, 0x1f,0xb2,0x5e,0xf3,0x9d,0x30,0xdc,0x71, 0x00,0x3e,0x7c,0x42,0xf8,0xc6,0x84,0xba, 0xeb,0xd5,0x97,0xa9,0x13,0x2d,0x6f,0x51,
        0x00,0xae,0x47,0xe9,0x8e,0x20,0xc9,0x67, 0x07,0xa9,0x40,0xee,0x89,0x27,0xce,0x60, 0x00,0x0e,0x1c,0x12,0x38,0x36,0x24,0x2a, 0x70,0x7e,0x6c,0x62,0x48,0x46,0x54,0x5a,
        0x00,0xaf,0x45,0xea,0x8a,0x25,0xcf,0x60, 0x0f,0xa0,0x4a,0xe5,0x85,0x2a,0xc0,0x6f, 0x00,0x1e,0x3c,0x22,0x78,0x66,0x44,0x5a, 0xf0,0xee,0xcc,0xd2,0x88,0x96,0xb4,0xaa,
        0x00,0xb0,0x7b,0xcb,0xf6,0x46,0x8d,0x3d, 0xf7,0x47,0x8c,0x3c,0x01,0xb1,0x7a,0xca, 0x00,0xf5,0xf1,0x04,0xf9,0x0c,0x08,0xfd, 0xe9,0x1c,0x18,0xed,0x10,0xe5,0xe1,0x14,
        0x00,0xb1,0x79,0xc8,0xf2,0x43,0x8b,0x3a, 0xff,0x4e,0x86,0x37,0x0d,0xbc,0x74,0xc5, 0x00,0xe5,0xd1,0x34,0xb9,0x5c,0x68,0x8d, 0x69,0x8c,0xb8,0x5d,0xd0,0x35,0x01,0xe4,
        0x00,0xb2,0x7f,0xcd,0xfe,0x4c,0x81,0x33, 0xe7,0x55,0x98,0x2a,0x19,0xab,0x66,0xd4, 0x00,0xd5,0xb1,0x64,0x79,0xac,0xc8,0x1d, 0xf2,0x27,0x43,0x96,0x8b,0x5e,0x3a,0xef,
        0x00,0xb3,0x7d,0xce,0xfa,0x49,0x87,0x34, 0xef,0x5c,0x92,0x21,0x15,0xa6,0x68,0xdb, 0x00,0xc5,0x91,0x54,0x39,0xfc,0xa8,0x6d, 0x72,0xb7,0xe3,0x26,0x4b,0x8e,0xda,0x1f,
        0x00,0xb4,0x73,0xc7,0xe6,0x52,0x95,0x21, 0xd7,0x63,0xa4,0x10,0x31,0x85,0x42,0xf6, 0x00,0xb5,0x71,0xc4,0xe2,0x57,0x93,0x26, 0xdf,0x6a,0xae,0x1b,0x3d,0x88,0x4c,0xf9,
        0x00,0xb5,0x71,0xc4,0xe2,0x57,0x93,0x26, 0xdf,0x6a,0xae,0x1b,0x3d,0x88,0x4c,0xf9, 0x00,0xa5,0x51,0xf4,0xa2,0x07,0xf3,0x56, 0x5f,0xfa,0x0e,0xab,0xfd,0x58,0xac,0x09,
        0x00,0xb6,0x77,0xc1,0xee,0x58,0x99,0x2f, 0xc7,0x71,0xb0,0x06,0x29,0x9f,0x5e,0xe8, 0x00,0x95,0x31,0xa4,0x62,0xf7,0x53,0xc6, 0xc4,0x51,0xf5,0x60,0xa6,0x33,0x97,0x02,
        0x00,0xb7,0x75,0xc2,0xea,0x5d,0x9f,0x28, 0xcf,0x78,0xba,0x0d,0x25,0x92,0x50,0xe7, 0x00,0x85,0x11,0x94,0x22,0xa7,0x33,0xb6, 0x44,0xc1,0x55,0xd0,0x66,0xe3,0x77,0xf2,
        0x00,0xb8,0x6b,0xd3,0xd6,0x6e,0xbd,0x05, 0xb7,0x0f,0xdc,0x64,0x61,0xd9,0x0a,0xb2, 0x00,0x75,0xea,0x9f,0xcf,0xba,0x25,0x50, 0x85,0xf0,0x6f,0x1a,0x4a,0x3f,0xa0,0xd5,
        0x00,0xb9,0x69,0xd0,0xd2,0x6b,0xbb,0x02, 0xbf,0x06,0xd6,0x6f,0x6d,0xd4,0x04,0xbd, 0x00,0x65,0xca,0xaf,0x8f,0xea,0x45,0x20, 0x05,0x60,0xcf,0xaa,0x8a,0xef,0x40,0x25,
        0x00,0xba,0x6f,0xd5,0xde,0x64,0xb1,0x0b, 0xa7,0x1d,0xc8,0x72,0x79,0xc3,0x16,0xac, 0x00,0x55,0xaa,0xff,0x4f,0x1a,0xe5,0xb0, 0x9e,0xcb,0x34,0x61,0xd1,0x84,0x7b,0x2e,
        0x00,0xbb,0x6d,0xd6,0xda,0x61,0xb7,0x0c, 0xaf,0x14,0xc2,0x79,0x75,0xce,0x18,0xa3, 0x00,0x45,0x8a,0xcf,0x0f,0x4a,0x85,0xc0, 0x1e,0x5b,0x94,0xd1,0x11,0x54,0x9b,0xde,
        0x00,0xbc,0x63,0xdf,0xc6,0x7a,0xa5,0x19, 0x97,0x2b,0xf4,0x48,0x51,0xed,0x32,0x8e, 0x00,0x35,0x6a,0x5f,0xd4,0xe1,0xbe,0x8b, 0xb3,0x86,0xd9,0xec,0x67,0x52,0x0d,0x38,
        0x00,0xbd,0x61,0xdc,0xc2,0x7f,0xa3,0x1e, 0x9f,0x22,0xfe,0x43,0x5d,0xe0,0x3c,0x81, 0x00,0x25,0x4a,0x6f,0x94,0xb1,0xde,0xfb, 0x33,0x16,0x79,0x5c,0xa7,0x82,0xed,0xc8,
        0x00,0xbe,0x67,0xd9,0xce,0x70,0xa9,0x17, 0x87,0x39,0xe0,0x5e,0x49,0xf7,0x2e,0x90, 0x00,0x15,0x2a,0x3f,0x54,0x41,0x7e,0x6b, 0xa8,0xbd,0x82,0x97,0xfc,0xe9,0xd6,0xc3,
        0x00,0xbf,0x65,0xda,0xca,0x75,0xaf,0x10, 0x8f,0x30,0xea,0x55,0x45,0xfa,0x20,0x9f, 0x00,0x05,0x0a,0x0f,0x14,0x11,0x1e,0x1b, 0x28,0x2d,0x22,0x27,0x3c,0x39,0x36,0x33,
        0x00,0xc0,0x9b,0x5b,0x2d,0xed,0xb6,0x76, 0x5a,0x9a,0xc1,0x01,0x77,0xb7,0xec,0x2c, 0x00,0xb4,0x73,0xc7,0xe6,0x52,0x95,0x21, 0xd7,0x63,0xa4,0x10,0x31,0x85,0x42,0xf6,
        0x00,0xc1,0x99,0x58,0x29,0xe8,0xb0,0x71, 0x52,0x93,0xcb,0x0a,0x7b,0xba,0xe2,0x23, 0x00,0xa4,0x53,0xf7,0xa6,0x02,0xf5,0x51, 0x57,0xf3,0x04,0xa0,0xf1,0x55,0xa2,0x06,
        0x00,0xc2,0x9f,0x5d,0x25,0xe7,0xba,0x78, 0x4a,0x88,0xd5,0x17,0x6f,0xad,0xf0,0x32, 0x00,0x94,0x33,0xa7,0x66,0xf2,0x55,0xc1, 0xcc,0x58,0xff,0x6b,0xaa,0x3e,0x99,0x0d,
        0x00,0xc3,0x9d,0x5e,0x21,0xe2,0xbc,0x7f, 0x42,0x81,0xdf,0x1c,0x63,0xa0,0xfe,0x3d, 0x00,0x84,0x13,0x97,0x26,0xa2,0x35,0xb1, 0x4c,0xc8,0x5f,0xdb,0x6a,0xee,0x79,0xfd,
        0x00,0xc4,0x93,0x57,0x3d,0xf9,0xae,0x6a, 0x7a,0xbe,0xe9,0x2d,0x47,0x83,0xd4,0x10, 0x00,0xf4,0xf3,0x07,0xfd,0x09,0x0e,0xfa, 0xe1,0x15,0x12,0xe6,0x1c,0xe8,0xef,0x1b,
        0x00,0xc5,0x91,0x54,0x39,0xfc,0xa8,0x6d, 0x72,0xb7,0xe3,0x26,0x4b,0x8e,0xda,0x1f, 0x00,0xe4,0xd3,0x37,0xbd,0x59,0x6e,0x8a, 0x61,0x85,0xb2,0x56,0xdc,0x38,0x0f,0xeb,
        0x00,0xc6,0x97,0x51,0x35,0xf3,0xa2,0x64, 0x6a,0xac,0xfd,0x3b,0x5f,0x99,0xc8,0x0e, 0x00,0xd4,0xb3,0x67,0x7d,0xa9,0xce,0x1a, 0xfa,0x2e,0x49,0x9d,0x87,0x53,0x34,0xe0,
        0x00,0xc7,0x95,0x52,0x31,0xf6,0xa4,0x63, 0x62,0xa5,0xf7,0x30,0x53,0x94,0xc6,0x01, 0x00,0xc4,0x93,0x57,0x3d,0xf9,0xae,0x6a, 0x7a,0xbe,0xe9,0x2d,0x47,0x83,0xd4,0x10,
        0x00,0xc8,0x8b,0x43,0x0d,0xc5,0x86,0x4e, 0x1a,0xd2,0x91,0x59,0x17,0xdf,0x9c,0x54, 0x00,0x34,0x68,0x5c,0xd0,0xe4,0xb8,0x8c, 0xbb,0x8f,0xd3,0xe7,0x6b,0x5f,0x03,0x37,
        0x00,0xc9,0x89,0x40,0x09,0xc0,0x80,0x49, 0x12,0xdb,0x9b,0x52,0x1b,0xd2,0x92,0x5b, 0x00,0x24,0x48,0x6c,0x90,0xb4,0xd8,0xfc, 0x3b,0x1f,0x73,0x57,0xab,0x8f,0xe3,0xc7,
        0x00,0xca,0x8f,0x45,0x05,0xcf,0x8a,0x40, 0x0a,0xc0,0x85,0x4f,0x0f,0xc5,0x80,0x4a, 0x00,0x14,0x28,0x3c,0x50,0x44,0x78,0x6c, 0xa0,0xb4,0x88,0x9c,0xf0,0xe4,0xd8,0xcc,
        0x00,0xcb,0x8d,0x46,0x01,0xca,0x8c,0x47, 0x02,0xc9,0x8f,0x44,0x03,0xc8,0x8e,0x45, 0x00,0x04,0x08,0x0c,0x10,0x14,0x18,0x1c, 0x20,0x24,0x28,0x2c,0x30,0x34,0x38,0x3c,
        0x00,0xcc,0x83,0x4f,0x1d,0xd1,0x9e,0x52, 0x3a,0xf6,0xb9,0x75,0x27,0xeb,0xa4,0x68, 0x00,0x74,0xe8,0x9c,0xcb,0xbf,0x23,0x57, 0x8d,0xf9,0x65,0x11,0x46,0x32,0xae,0xda,
        0x00,0xcd,0x81,0x4c,0x19,0xd4,0x98,0x55, 0x32,0xff,0xb3,0x7e,0x2b,0xe6,0xaa,0x67, 0x00,0x64,0xc8,0xac,0x8b,0xef,0x43,0x27, 0x0d,0x69,0xc5,0xa1,0x86,0xe2,0x4e,0x2a,
        0x00,0xce,0x87,0x49,0x15,0xdb,0x92,0x5c, 0x2a,0xe4,0xad,0x63,0x3f,0xf1,0xb8,0x76, 0x00,0x54,0xa8,0xfc,0x4b,0x1f,0xe3,0xb7, 0x96,0xc2,0x3e,0x6a,0xdd,0x89,0x75,0x21,
        0x00,0xcf,0x85,0x4a,0x11,0xde,0x94,0x5b, 0x22,0xed,0xa7,0x68,0x33,0xfc,0xb6,0x79, 0x00,0x44,0x88,0xcc,0x0b,0x4f,0x83,0xc7, 0x16,0x52,0x9e,0xda,0x1d,0x59,0x95,0xd1,
        0x00,0xd0,0xbb,0x6b,0x6d,0xbd,0xd6,0x06, 0xda,0x0a,0x61,0xb1,0xb7,0x67,0x0c,0xdc, 0x00,0xaf,0x45,0xea,0x8a,0x25,0xcf,0x60, 0x0f,0xa0,0x4a,0xe5,0x85,0x2a,0xc0,0x6f,
        0x00,0xd1,0xb9,0x68,0x69,0xb8,0xd0,0x01, 0xd2,0x03,0x6b,0xba,0xbb,0x6a,0x02,0xd3, 0x00,0xbf,0x65,0xda,0xca,0x75,0xaf,0x10, 0x8f,0x30,0xea,0x55,0x45,0xfa,0x20,0x9f,
        0x00,0xd2,0xbf,0x6d,0x65,0xb7,0xda,0x08, 0xca,0x18,0x75,0xa7,0xaf,0x7d,0x10,0xc2, 0x00,0x8f,0x05,0x8a,0x0a,0x85,0x0f,0x80, 0x14,0x9b,0x11,0x9e,0x1e,0x91,0x1b,0x94,
        0x00,0xd3,0xbd,0x6e,0x61,0xb2,0xdc,0x0f, 0xc2,0x11,0x7f,0xac,0xa3,0x70,0x1e,0xcd, 0x00,0x9f,0x25,0xba,0x4a,0xd5,0x6f,0xf0, 0x94,0x0b,0xb1,0x2e,0xde,0x41,0xfb,0x64,
        0x00,0xd4,0xb3,0x67,0x7d,0xa9,0xce,0x1a, 0xfa,0x2e,0x49,0x9d,0x87,0x53,0x34,0xe0, 0x00,0xef,0xc5,0x2a,0x91,0x7e,0x54,0xbb, 0x39,0xd6,0xfc,0x13,0xa8,0x47,0x6d,0x82,
        0x00,0xd5,0xb1,0x64,0x79,0xac,0xc8,0x1d, 0xf2,0x27,0x43,0x96,0x8b,0x5e,0x3a,0xef, 0x00,0xff,0xe5,0x1a,0xd1,0x2e,0x34,0xcb, 0xb9,0x46,0x5c,0xa3,0x68,0x97,0x8d,0x72,
        0x00,0xd6,0xb7,0x61,0x75,0xa3,0xc2,0x14, 0xea,0x3c,0x5d,0x8b,0x9f,0x49,0x28,0xfe, 0x00,0xcf,0x85,0x4a,0x11,0xde,0x94,0x5b, 0x22,0xed,0xa7,0x68,0x33,0xfc,0xb6,0x79,
        0x00,0xd7,0xb5,0x62,0x71,0xa6,0xc4,0x13, 0xe2,0x35,0x57,0x80,0x93,0x44,0x26,0xf1, 0x00,0xdf,0xa5,0x7a,0x51,0x8e,0xf4,0x2b, 0xa2,0x7d,0x07,0xd8,0xf3,0x2c,0x56,0x89,
        0x00,0xd8,0xab,0x73,0x4d,0x95,0xe6,0x3e, 0x9a,0x42,0x31,0xe9,0xd7,0x0f,0x7c,0xa4, 0x00,0x2f,0x5e,0x71,0xbc,0x93,0xe2,0xcd, 0x63,0x4c,0x3d,0x12,0xdf,0xf0,0x81,0xae,
        0x00,0xd9,0xa9,0x70,0x49,0x90,0xe0,0x39, 0x92,0x4b,0x3b,0xe2,0xdb,0x02,0x72,0xab, 0x00,0x3f,0x7e,0x41,0xfc,0xc3,0x82,0xbd, 0xe3,0xdc,0x9d,0xa2,0x1f,0x20,0x61,0x5e,
        0x00,0xda,0xaf,0x75,0x45,0x9f,0xea,0x30, 0x8a,0x50,0x25,0xff,0xcf,0x15,0x60,0xba, 0x00,0x0f,0x1e,0x11,0x3c,0x33,0x22,0x2d, 0x78,0x77,0x66,0x69,0x44,0x4b,0x5a,0x55,
        0x00,0xdb,0xad,0x76,0x41,0x9a,0xec,0x37, 0x82,0x59,0x2f,0xf4,0xc3,0x18,0x6e,0xb5, 0x00,0x1f,0x3e,0x21,0x7c,0x63,0x42,0x5d, 0xf8,0xe7,0xc6,0xd9,0x84,0x9b,0xba,0xa5,
        0x00,0xdc,0xa3,0x7f,0x5d,0x81,0xfe,0x22, 0xba,0x66,0x19,0xc5,0xe7,0x3b,0x44,0x98, 0x00,0x6f,0xde,0xb1,0xa7,0xc8,0x79,0x16, 0x55,0x3a,0x8b,0xe4,0xf2,0x9d,0x2c,0x43,
        0x00,0xdd,0xa1,0x7c,0x59,0x84,0xf8,0x25, 0xb2,0x6f,0x13,0xce,0xeb,0x36,0x4a,0x97, 0x00,0x7f,0xfe,0x81,0xe7,0x98,0x19,0x66, 0xd5,0xaa,0x2b,0x54,0x32,0x4d,0xcc,0xb3,
        0x00,0xde,0xa7,0x79,0x55,0x8b,0xf2,0x2c, 0xaa,0x74,0x0d,0xd3,0xff,0x21,0x58,0x86, 0x00,0x4f,0x9e,0xd1,0x27,0x68,0xb9,0xf6, 0x4e,0x01,0xd0,0x9f,0x69,0x26,0xf7,0xb8,
        0x00,0xdf,0xa5,0x7a,0x51,0x8e,0xf4,0x2b, 0xa2,0x7d,0x07,0xd8,0xf3,0x2c,0x56,0x89, 0x00,0x5f,0xbe,0xe1,0x67,0x38,0xd9,0x86, 0xce,0x91,0x70,0x2f,0xa9,0xf6,0x17,0x48,
        0x00,0xe0,0xdb,0x3b,0xad,0x4d,0x76,0x96, 0x41,0xa1,0x9a,0x7a,0xec,0x0c,0x37,0xd7, 0x00,0x82,0x1f,0x9d,0x3e,0xbc,0x21,0xa3, 0x7c,0xfe,0x63,0xe1,0x42,0xc0,0x5d,0xdf,
        0x00,0xe1,0xd9,0x38,0xa9,0x48,0x70,0x91, 0x49,0xa8,0x90,0x71,0xe0,0x01,0x39,0xd8, 0x00,0x92,0x3f,0xad,0x7e,0xec,0x41,0xd3, 0xfc,0x6e,0xc3,0x51,0x82,0x10,0xbd,0x2f,
        0x00,0xe2,0xdf,0x3d,0xa5,0x47,0x7a,0x98, 0x51,0xb3,0x8e,0x6c,0xf4,0x16,0x2b,0xc9, 0x00,0xa2,0x5f,0xfd,0xbe,0x1c,0xe1,0x43, 0x67,0xc5,0x38,0x9a,0xd9,0x7b,0x86,0x24,
        0x00,0xe3,0xdd,0x3e,0xa1,0x42,0x7c,0x9f, 0x59,0xba,0x84,0x67,0xf8,0x1b,0x25,0xc6, 0x00,0xb2,0x7f,0xcd,0xfe,0x4c,0x81,0x33, 0xe7,0x55,0x98,0x2a,0x19,0xab,0x66,0xd4,
        0x00,0xe4,0xd3,0x37,0xbd,0x59,0x6e,0x8a, 0x61,0x85,0xb2,0x56,0xdc,0x38,0x0f,0xeb, 0x00,0xc2,0x9f,0x5d,0x25,0xe7,0xba,0x78, 0x4a,0x88,0xd5,0x17,0x6f,0xad,0xf0,0x32,
        0x00,0xe5,0xd1,0x34,0xb9,0x5c,0x68,0x8d, 0x69,0x8c,0xb8,0x5d,0xd0,0x35,0x01,0xe4, 0x00,0xd2,0xbf,0x6d,0x65,0xb7,0xda,0x08, 0xca,0x18,0x75,0xa7,0xaf,0x7d,0x10,0xc2,
        0x00,0xe6,0xd7,0x31,0xb5,0x53,0x62,0x84, 0x71,0x97,0xa6,0x40,0xc4,0x22,0x13,0xf5, 0x00,0xe2,0xdf,0x3d,0xa5,0x47,0x7a,0x98, 0x51,0xb3,0x8e,0x6c,0xf4,0x16,0x2b,0xc9,
        0x00,0xe7,0xd5,0x32,0xb1,0x56,0x64,0x83, 0x79,0x9e,0xac,0x4b,0xc8,0x2f,0x1d,0xfa, 0x00,0xf2,0xff,0x0d,0xe5,0x17,0x1a,0xe8, 0xd1,0x23,0x2e,0xdc,0x34,0xc6,0xcb,0x39,
        0x00,0xe8,0xcb,0x23,0x8d,0x65,0x46,0xae, 0x01,0xe9,0xca,0x22,0x8c,0x64,0x47,0xaf, 0x00,0x02,0x04,0x06,0x08,0x0a,0x0c,0x0e, 0x10,0x12,0x14,0x16,0x18,0x1a,0x1c,0x1e,
        0x00,0xe9,0xc9,0x20,0x89,0x60,0x40,0xa9, 0x09,0xe0,0xc0,0x29,0x80,0x69,0x49,0xa0, 0x00,0x12,0x24,0x36,0x48,0x5a,0x6c,0x7e, 0x90,0x82,0xb4,0xa6,0xd8,0xca,0xfc,0xee,
        0x00,0xea,0xcf,0x25,0x85,0x6f,0x4a,0xa0, 0x11,0xfb,0xde,0x34,0x94,0x7e,0x5b,0xb1, 0x00,0x22,0x44,0x66,0x88,0xaa,0xcc,0xee, 0x0b,0x29,0x4f,0x6d,0x83,0xa1,0xc7,0xe5,
        0x00,0xeb,0xcd,0x26,0x81,0x6a,0x4c,0xa7, 0x19,0xf2,0xd4,0x3f,0x98,0x73,0x55,0xbe, 0x00,0x32,0x64,0x56,0xc8,0xfa,0xac,0x9e, 0x8b,0xb9,0xef,0xdd,0x43,0x71,0x27,0x15,
        0x00,0xec,0xc3,0x2f,0x9d,0x71,0x5e,0xb2, 0x21,0xcd,0xe2,0x0e,0xbc,0x50,0x7f,0x93, 0x00,0x42,0x84,0xc6,0x13,0x51,0x97,0xd5, 0x26,0x64,0xa2,0xe0,0x35,0x77,0xb1,0xf3,
        0x00,0xed,0xc1,0x2c,0x99,0x74,0x58,0xb5, 0x29,0xc4,0xe8,0x05,0xb0,0x5d,0x71,0x9c, 0x00,0x52,0xa4,0xf6,0x53,0x01,0xf7,0xa5, 0xa6,0xf4,0x02,0x50,0xf5,0xa7,0x51,0x03,
        0x00,0xee,0xc7,0x29,0x95,0x7b,0x52,0xbc, 0x31,0xdf,0xf6,0x18,0xa4,0x4a,0x63,0x8d, 0x00,0x62,0xc4,0xa6,0x93,0xf1,0x57,0x35, 0x3d,0x5f,0xf9,0x9b,0xae,0xcc,0x6a,0x08,
        0x00,0xef,0xc5,0x2a,0x91,0x7e,0x54,0xbb, 0x39,0xd6,0xfc,0x13,0xa8,0x47,0x6d,0x82, 0x00,0x72,0xe4,0x96,0xd3,0xa1,0x37,0x45, 0xbd,0xcf,0x59,0x2b,0x6e,0x1c,0x8a,0xf8,
        0x00,0xf0,0xfb,0x0b,0xed,0x1d,0x16,0xe6, 0xc1,0x31,0x3a,0xca,0x2c,0xdc,0xd7,0x27, 0x00,0x99,0x29,0xb0,0x52,0xcb,0x7b,0xe2, 0xa4,0x3d,0x8d,0x14,0xf6,0x6f,0xdf,0x46,
        0x00,0xf1,0xf9,0x08,0xe9,0x18,0x10,0xe1, 0xc9,0x38,0x30,0xc1,0x20,0xd1,0xd9,0x28, 0x00,0x89,0x09,0x80,0x12,0x9b,0x1b,0x92, 0x24,0xad,0x2d,0xa4,0x36,0xbf,0x3f,0xb6,
        0x00,0xf2,0xff,0x0d,0xe5,0x17,0x1a,0xe8, 0xd1,0x23,0x2e,0xdc,0x34,0xc6,0xcb,0x39, 0x00,0xb9,0x69,0xd0,0xd2,0x6b,0xbb,0x02, 0xbf,0x06,0xd6,0x6f,0x6d,0xd4,0x04,0xbd,
        0x00,0xf3,0xfd,0x0e,0xe1,0x12,0x1c,0xef, 0xd9,0x2a,0x24,0xd7,0x38,0xcb,0xc5,0x36, 0x00,0xa9,0x49,0xe0,0x92,0x3b,0xdb,0x72, 0x3f,0x96,0x76,0xdf,0xad,0x04,0xe4,0x4d,
        0x00,0xf4,0xf3,0x07,0xfd,0x09,0x0e,0xfa, 0xe1,0x15,0x12,0xe6,0x1c,0xe8,0xef,0x1b, 0x00,0xd9,0xa9,0x70,0x49,0x90,0xe0,0x39, 0x92,0x4b,0x3b,0xe2,0xdb,0x02,0x72,0xab,
        0x00,0xf5,0xf1,0x04,0xf9,0x0c,0x08,0xfd, 0xe9,0x1c,0x18,0xed,0x10,0xe5,0xe1,0x14, 0x00,0xc9,0x89,0x40,0x09,0xc0,0x80,0x49, 0x12,0xdb,0x9b,0x52,0x1b,0xd2,0x92,0x5b,
        0x00,0xf6,0xf7,0x01,0xf5,0x03,0x02,0xf4, 0xf1,0x07,0x06,0xf0,0x04,0xf2,0xf3,0x05, 0x00,0xf9,0xe9,0x10,0xc9,0x30,0x20,0xd9, 0x89,0x70,0x60,0x99,0x40,0xb9,0xa9,0x50,
        0x00,0xf7,0xf5,0x02,0xf1,0x06,0x04,0xf3, 0xf9,0x0e,0x0c,0xfb,0x08,0xff,0xfd,0x0a, 0x00,0xe9,0xc9,0x20,0x89,0x60,0x40,0xa9, 0x09,0xe0,0xc0,0x29,0x80,0x69,0x49,0xa0,
        0x00,0xf8,0xeb,0x13,0xcd,0x35,0x26,0xde, 0x81,0x79,0x6a,0x92,0x4c,0xb4,0xa7,0x5f, 0x00,0x19,0x32,0x2b,0x64,0x7d,0x56,0x4f, 0xc8,0xd1,0xfa,0xe3,0xac,0xb5,0x9e,0x87,
        0x00,0xf9,0xe9,0x10,0xc9,0x30,0x20,0xd9, 0x89,0x70,0x60,0x99,0x40,0xb9,0xa9,0x50, 0x00,0x09,0x12,0x1b,0x24,0x2d,0x36,0x3f, 0x48,0x41,0x5a,0x53,0x6c,0x65,0x7e,0x77,
        0x00,0xfa,0xef,0x15,0xc5,0x3f,0x2a,0xd0, 0x91,0x6b,0x7e,0x84,0x54,0xae,0xbb,0x41, 0x00,0x39,0x72,0x4b,0xe4,0xdd,0x96,0xaf, 0xd3,0xea,0xa1,0x98,0x37,0x0e,0x45,0x7c,
        0x00,0xfb,0xed,0x16,0xc1,0x3a,0x2c,0xd7, 0x99,0x62,0x74,0x8f,0x58,0xa3,0xb5,0x4e, 0x00,0x29,0x52,0x7b,0xa4,0x8d,0xf6,0xdf, 0x53,0x7a,0x01,0x28,0xf7,0xde,0xa5,0x8c,
        0x00,0xfc,0xe3,0x1f,0xdd,0x21,0x3e,0xc2, 0xa1,0x5d,0x42,0xbe,0x7c,0x80,0x9f,0x63, 0x00,0x59,0xb2,0xeb,0x7f,0x26,0xcd,0x94, 0xfe,0xa7,0x4c,0x15,0x81,0xd8,0x33,0x6a,
        0x00,0xfd,0xe1,0x1c,0xd9,0x24,0x38,0xc5, 0xa9,0x54,0x48,0xb5,0x70,0x8d,0x91,0x6c, 0x00,0x49,0x92,0xdb,0x3f,0x76,0xad,0xe4, 0x7e,0x37,0xec,0xa5,0x41,0x08,0xd3,0x9a,
        0x00,0xfe,0xe7,0x19,0xd5,0x2b,0x32,0xcc, 0xb1,0x4f,0x56,0xa8,0x64,0x9a,0x83,0x7d, 0x00,0x79,0xf2,0x8b,0xff,0x86,0x0d,0x74, 0xe5,0x9c,0x17,0x6e,0x1a,0x63,0xe8,0x91,
        0x00,0xff,0xe5,0x1a,0xd1,0x2e,0x34,0xcb, 0xb9,0x46,0x5c,0xa3,0x68,0x97,0x8d,0x72, 0x00,0x69,0xd2,0xbb,0xbf,0xd6,0x6d,0x04, 0x65,0x0c,0xb7,0xde,0xda,0xb3,0x08,0x61
};

// this is based on the aes poly
const gf256 __gf256_mulbase[8*256] = {
		// row_nr**1, row_nr**2, ..., row_nr**8
        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
        0x01,0x02,0x04,0x08,0x10,0x20,0x40,0x80,
        0x02,0x04,0x08,0x10,0x20,0x40,0x80,0x1b,
        0x03,0x06,0x0c,0x18,0x30,0x60,0xc0,0x9b,
        0x04,0x08,0x10,0x20,0x40,0x80,0x1b,0x36,
        0x05,0x0a,0x14,0x28,0x50,0xa0,0x5b,0xb6,
        0x06,0x0c,0x18,0x30,0x60,0xc0,0x9b,0x2d,
        0x07,0x0e,0x1c,0x38,0x70,0xe0,0xdb,0xad,
        0x08,0x10,0x20,0x40,0x80,0x1b,0x36,0x6c,
        0x09,0x12,0x24,0x48,0x90,0x3b,0x76,0xec,
        0x0a,0x14,0x28,0x50,0xa0,0x5b,0xb6,0x77,
        0x0b,0x16,0x2c,0x58,0xb0,0x7b,0xf6,0xf7,
        0x0c,0x18,0x30,0x60,0xc0,0x9b,0x2d,0x5a,
        0x0d,0x1a,0x34,0x68,0xd0,0xbb,0x6d,0xda,
        0x0e,0x1c,0x38,0x70,0xe0,0xdb,0xad,0x41,
        0x0f,0x1e,0x3c,0x78,0xf0,0xfb,0xed,0xc1,
        0x10,0x20,0x40,0x80,0x1b,0x36,0x6c,0xd8,
        0x11,0x22,0x44,0x88,0x0b,0x16,0x2c,0x58,
        0x12,0x24,0x48,0x90,0x3b,0x76,0xec,0xc3,
        0x13,0x26,0x4c,0x98,0x2b,0x56,0xac,0x43,
        0x14,0x28,0x50,0xa0,0x5b,0xb6,0x77,0xee,
        0x15,0x2a,0x54,0xa8,0x4b,0x96,0x37,0x6e,
        0x16,0x2c,0x58,0xb0,0x7b,0xf6,0xf7,0xf5,
        0x17,0x2e,0x5c,0xb8,0x6b,0xd6,0xb7,0x75,
        0x18,0x30,0x60,0xc0,0x9b,0x2d,0x5a,0xb4,
        0x19,0x32,0x64,0xc8,0x8b,0x0d,0x1a,0x34,
        0x1a,0x34,0x68,0xd0,0xbb,0x6d,0xda,0xaf,
        0x1b,0x36,0x6c,0xd8,0xab,0x4d,0x9a,0x2f,
        0x1c,0x38,0x70,0xe0,0xdb,0xad,0x41,0x82,
        0x1d,0x3a,0x74,0xe8,0xcb,0x8d,0x01,0x02,
        0x1e,0x3c,0x78,0xf0,0xfb,0xed,0xc1,0x99,
        0x1f,0x3e,0x7c,0xf8,0xeb,0xcd,0x81,0x19,
        0x20,0x40,0x80,0x1b,0x36,0x6c,0xd8,0xab,
        0x21,0x42,0x84,0x13,0x26,0x4c,0x98,0x2b,
        0x22,0x44,0x88,0x0b,0x16,0x2c,0x58,0xb0,
        0x23,0x46,0x8c,0x03,0x06,0x0c,0x18,0x30,
        0x24,0x48,0x90,0x3b,0x76,0xec,0xc3,0x9d,
        0x25,0x4a,0x94,0x33,0x66,0xcc,0x83,0x1d,
        0x26,0x4c,0x98,0x2b,0x56,0xac,0x43,0x86,
        0x27,0x4e,0x9c,0x23,0x46,0x8c,0x03,0x06,
        0x28,0x50,0xa0,0x5b,0xb6,0x77,0xee,0xc7,
        0x29,0x52,0xa4,0x53,0xa6,0x57,0xae,0x47,
        0x2a,0x54,0xa8,0x4b,0x96,0x37,0x6e,0xdc,
        0x2b,0x56,0xac,0x43,0x86,0x17,0x2e,0x5c,
        0x2c,0x58,0xb0,0x7b,0xf6,0xf7,0xf5,0xf1,
        0x2d,0x5a,0xb4,0x73,0xe6,0xd7,0xb5,0x71,
        0x2e,0x5c,0xb8,0x6b,0xd6,0xb7,0x75,0xea,
        0x2f,0x5e,0xbc,0x63,0xc6,0x97,0x35,0x6a,
        0x30,0x60,0xc0,0x9b,0x2d,0x5a,0xb4,0x73,
        0x31,0x62,0xc4,0x93,0x3d,0x7a,0xf4,0xf3,
        0x32,0x64,0xc8,0x8b,0x0d,0x1a,0x34,0x68,
        0x33,0x66,0xcc,0x83,0x1d,0x3a,0x74,0xe8,
        0x34,0x68,0xd0,0xbb,0x6d,0xda,0xaf,0x45,
        0x35,0x6a,0xd4,0xb3,0x7d,0xfa,0xef,0xc5,
        0x36,0x6c,0xd8,0xab,0x4d,0x9a,0x2f,0x5e,
        0x37,0x6e,0xdc,0xa3,0x5d,0xba,0x6f,0xde,
        0x38,0x70,0xe0,0xdb,0xad,0x41,0x82,0x1f,
        0x39,0x72,0xe4,0xd3,0xbd,0x61,0xc2,0x9f,
        0x3a,0x74,0xe8,0xcb,0x8d,0x01,0x02,0x04,
        0x3b,0x76,0xec,0xc3,0x9d,0x21,0x42,0x84,
        0x3c,0x78,0xf0,0xfb,0xed,0xc1,0x99,0x29,
        0x3d,0x7a,0xf4,0xf3,0xfd,0xe1,0xd9,0xa9,
        0x3e,0x7c,0xf8,0xeb,0xcd,0x81,0x19,0x32,
        0x3f,0x7e,0xfc,0xe3,0xdd,0xa1,0x59,0xb2,
        0x40,0x80,0x1b,0x36,0x6c,0xd8,0xab,0x4d,
        0x41,0x82,0x1f,0x3e,0x7c,0xf8,0xeb,0xcd,
        0x42,0x84,0x13,0x26,0x4c,0x98,0x2b,0x56,
        0x43,0x86,0x17,0x2e,0x5c,0xb8,0x6b,0xd6,
        0x44,0x88,0x0b,0x16,0x2c,0x58,0xb0,0x7b,
        0x45,0x8a,0x0f,0x1e,0x3c,0x78,0xf0,0xfb,
        0x46,0x8c,0x03,0x06,0x0c,0x18,0x30,0x60,
        0x47,0x8e,0x07,0x0e,0x1c,0x38,0x70,0xe0,
        0x48,0x90,0x3b,0x76,0xec,0xc3,0x9d,0x21,
        0x49,0x92,0x3f,0x7e,0xfc,0xe3,0xdd,0xa1,
        0x4a,0x94,0x33,0x66,0xcc,0x83,0x1d,0x3a,
        0x4b,0x96,0x37,0x6e,0xdc,0xa3,0x5d,0xba,
        0x4c,0x98,0x2b,0x56,0xac,0x43,0x86,0x17,
        0x4d,0x9a,0x2f,0x5e,0xbc,0x63,0xc6,0x97,
        0x4e,0x9c,0x23,0x46,0x8c,0x03,0x06,0x0c,
        0x4f,0x9e,0x27,0x4e,0x9c,0x23,0x46,0x8c,
        0x50,0xa0,0x5b,0xb6,0x77,0xee,0xc7,0x95,
        0x51,0xa2,0x5f,0xbe,0x67,0xce,0x87,0x15,
        0x52,0xa4,0x53,0xa6,0x57,0xae,0x47,0x8e,
        0x53,0xa6,0x57,0xae,0x47,0x8e,0x07,0x0e,
        0x54,0xa8,0x4b,0x96,0x37,0x6e,0xdc,0xa3,
        0x55,0xaa,0x4f,0x9e,0x27,0x4e,0x9c,0x23,
        0x56,0xac,0x43,0x86,0x17,0x2e,0x5c,0xb8,
        0x57,0xae,0x47,0x8e,0x07,0x0e,0x1c,0x38,
        0x58,0xb0,0x7b,0xf6,0xf7,0xf5,0xf1,0xf9,
        0x59,0xb2,0x7f,0xfe,0xe7,0xd5,0xb1,0x79,
        0x5a,0xb4,0x73,0xe6,0xd7,0xb5,0x71,0xe2,
        0x5b,0xb6,0x77,0xee,0xc7,0x95,0x31,0x62,
        0x5c,0xb8,0x6b,0xd6,0xb7,0x75,0xea,0xcf,
        0x5d,0xba,0x6f,0xde,0xa7,0x55,0xaa,0x4f,
        0x5e,0xbc,0x63,0xc6,0x97,0x35,0x6a,0xd4,
        0x5f,0xbe,0x67,0xce,0x87,0x15,0x2a,0x54,
        0x60,0xc0,0x9b,0x2d,0x5a,0xb4,0x73,0xe6,
        0x61,0xc2,0x9f,0x25,0x4a,0x94,0x33,0x66,
        0x62,0xc4,0x93,0x3d,0x7a,0xf4,0xf3,0xfd,
        0x63,0xc6,0x97,0x35,0x6a,0xd4,0xb3,0x7d,
        0x64,0xc8,0x8b,0x0d,0x1a,0x34,0x68,0xd0,
        0x65,0xca,0x8f,0x05,0x0a,0x14,0x28,0x50,
        0x66,0xcc,0x83,0x1d,0x3a,0x74,0xe8,0xcb,
        0x67,0xce,0x87,0x15,0x2a,0x54,0xa8,0x4b,
        0x68,0xd0,0xbb,0x6d,0xda,0xaf,0x45,0x8a,
        0x69,0xd2,0xbf,0x65,0xca,0x8f,0x05,0x0a,
        0x6a,0xd4,0xb3,0x7d,0xfa,0xef,0xc5,0x91,
        0x6b,0xd6,0xb7,0x75,0xea,0xcf,0x85,0x11,
        0x6c,0xd8,0xab,0x4d,0x9a,0x2f,0x5e,0xbc,
        0x6d,0xda,0xaf,0x45,0x8a,0x0f,0x1e,0x3c,
        0x6e,0xdc,0xa3,0x5d,0xba,0x6f,0xde,0xa7,
        0x6f,0xde,0xa7,0x55,0xaa,0x4f,0x9e,0x27,
        0x70,0xe0,0xdb,0xad,0x41,0x82,0x1f,0x3e,
        0x71,0xe2,0xdf,0xa5,0x51,0xa2,0x5f,0xbe,
        0x72,0xe4,0xd3,0xbd,0x61,0xc2,0x9f,0x25,
        0x73,0xe6,0xd7,0xb5,0x71,0xe2,0xdf,0xa5,
        0x74,0xe8,0xcb,0x8d,0x01,0x02,0x04,0x08,
        0x75,0xea,0xcf,0x85,0x11,0x22,0x44,0x88,
        0x76,0xec,0xc3,0x9d,0x21,0x42,0x84,0x13,
        0x77,0xee,0xc7,0x95,0x31,0x62,0xc4,0x93,
        0x78,0xf0,0xfb,0xed,0xc1,0x99,0x29,0x52,
        0x79,0xf2,0xff,0xe5,0xd1,0xb9,0x69,0xd2,
        0x7a,0xf4,0xf3,0xfd,0xe1,0xd9,0xa9,0x49,
        0x7b,0xf6,0xf7,0xf5,0xf1,0xf9,0xe9,0xc9,
        0x7c,0xf8,0xeb,0xcd,0x81,0x19,0x32,0x64,
        0x7d,0xfa,0xef,0xc5,0x91,0x39,0x72,0xe4,
        0x7e,0xfc,0xe3,0xdd,0xa1,0x59,0xb2,0x7f,
        0x7f,0xfe,0xe7,0xd5,0xb1,0x79,0xf2,0xff,
        0x80,0x1b,0x36,0x6c,0xd8,0xab,0x4d,0x9a,
        0x81,0x19,0x32,0x64,0xc8,0x8b,0x0d,0x1a,
        0x82,0x1f,0x3e,0x7c,0xf8,0xeb,0xcd,0x81,
        0x83,0x1d,0x3a,0x74,0xe8,0xcb,0x8d,0x01,
        0x84,0x13,0x26,0x4c,0x98,0x2b,0x56,0xac,
        0x85,0x11,0x22,0x44,0x88,0x0b,0x16,0x2c,
        0x86,0x17,0x2e,0x5c,0xb8,0x6b,0xd6,0xb7,
        0x87,0x15,0x2a,0x54,0xa8,0x4b,0x96,0x37,
        0x88,0x0b,0x16,0x2c,0x58,0xb0,0x7b,0xf6,
        0x89,0x09,0x12,0x24,0x48,0x90,0x3b,0x76,
        0x8a,0x0f,0x1e,0x3c,0x78,0xf0,0xfb,0xed,
        0x8b,0x0d,0x1a,0x34,0x68,0xd0,0xbb,0x6d,
        0x8c,0x03,0x06,0x0c,0x18,0x30,0x60,0xc0,
        0x8d,0x01,0x02,0x04,0x08,0x10,0x20,0x40,
        0x8e,0x07,0x0e,0x1c,0x38,0x70,0xe0,0xdb,
        0x8f,0x05,0x0a,0x14,0x28,0x50,0xa0,0x5b,
        0x90,0x3b,0x76,0xec,0xc3,0x9d,0x21,0x42,
        0x91,0x39,0x72,0xe4,0xd3,0xbd,0x61,0xc2,
        0x92,0x3f,0x7e,0xfc,0xe3,0xdd,0xa1,0x59,
        0x93,0x3d,0x7a,0xf4,0xf3,0xfd,0xe1,0xd9,
        0x94,0x33,0x66,0xcc,0x83,0x1d,0x3a,0x74,
        0x95,0x31,0x62,0xc4,0x93,0x3d,0x7a,0xf4,
        0x96,0x37,0x6e,0xdc,0xa3,0x5d,0xba,0x6f,
        0x97,0x35,0x6a,0xd4,0xb3,0x7d,0xfa,0xef,
        0x98,0x2b,0x56,0xac,0x43,0x86,0x17,0x2e,
        0x99,0x29,0x52,0xa4,0x53,0xa6,0x57,0xae,
        0x9a,0x2f,0x5e,0xbc,0x63,0xc6,0x97,0x35,
        0x9b,0x2d,0x5a,0xb4,0x73,0xe6,0xd7,0xb5,
        0x9c,0x23,0x46,0x8c,0x03,0x06,0x0c,0x18,
        0x9d,0x21,0x42,0x84,0x13,0x26,0x4c,0x98,
        0x9e,0x27,0x4e,0x9c,0x23,0x46,0x8c,0x03,
        0x9f,0x25,0x4a,0x94,0x33,0x66,0xcc,0x83,
        0xa0,0x5b,0xb6,0x77,0xee,0xc7,0x95,0x31,
        0xa1,0x59,0xb2,0x7f,0xfe,0xe7,0xd5,0xb1,
        0xa2,0x5f,0xbe,0x67,0xce,0x87,0x15,0x2a,
        0xa3,0x5d,0xba,0x6f,0xde,0xa7,0x55,0xaa,
        0xa4,0x53,0xa6,0x57,0xae,0x47,0x8e,0x07,
        0xa5,0x51,0xa2,0x5f,0xbe,0x67,0xce,0x87,
        0xa6,0x57,0xae,0x47,0x8e,0x07,0x0e,0x1c,
        0xa7,0x55,0xaa,0x4f,0x9e,0x27,0x4e,0x9c,
        0xa8,0x4b,0x96,0x37,0x6e,0xdc,0xa3,0x5d,
        0xa9,0x49,0x92,0x3f,0x7e,0xfc,0xe3,0xdd,
        0xaa,0x4f,0x9e,0x27,0x4e,0x9c,0x23,0x46,
        0xab,0x4d,0x9a,0x2f,0x5e,0xbc,0x63,0xc6,
        0xac,0x43,0x86,0x17,0x2e,0x5c,0xb8,0x6b,
        0xad,0x41,0x82,0x1f,0x3e,0x7c,0xf8,0xeb,
        0xae,0x47,0x8e,0x07,0x0e,0x1c,0x38,0x70,
        0xaf,0x45,0x8a,0x0f,0x1e,0x3c,0x78,0xf0,
        0xb0,0x7b,0xf6,0xf7,0xf5,0xf1,0xf9,0xe9,
        0xb1,0x79,0xf2,0xff,0xe5,0xd1,0xb9,0x69,
        0xb2,0x7f,0xfe,0xe7,0xd5,0xb1,0x79,0xf2,
        0xb3,0x7d,0xfa,0xef,0xc5,0x91,0x39,0x72,
        0xb4,0x73,0xe6,0xd7,0xb5,0x71,0xe2,0xdf,
        0xb5,0x71,0xe2,0xdf,0xa5,0x51,0xa2,0x5f,
        0xb6,0x77,0xee,0xc7,0x95,0x31,0x62,0xc4,
        0xb7,0x75,0xea,0xcf,0x85,0x11,0x22,0x44,
        0xb8,0x6b,0xd6,0xb7,0x75,0xea,0xcf,0x85,
        0xb9,0x69,0xd2,0xbf,0x65,0xca,0x8f,0x05,
        0xba,0x6f,0xde,0xa7,0x55,0xaa,0x4f,0x9e,
        0xbb,0x6d,0xda,0xaf,0x45,0x8a,0x0f,0x1e,
        0xbc,0x63,0xc6,0x97,0x35,0x6a,0xd4,0xb3,
        0xbd,0x61,0xc2,0x9f,0x25,0x4a,0x94,0x33,
        0xbe,0x67,0xce,0x87,0x15,0x2a,0x54,0xa8,
        0xbf,0x65,0xca,0x8f,0x05,0x0a,0x14,0x28,
        0xc0,0x9b,0x2d,0x5a,0xb4,0x73,0xe6,0xd7,
        0xc1,0x99,0x29,0x52,0xa4,0x53,0xa6,0x57,
        0xc2,0x9f,0x25,0x4a,0x94,0x33,0x66,0xcc,
        0xc3,0x9d,0x21,0x42,0x84,0x13,0x26,0x4c,
        0xc4,0x93,0x3d,0x7a,0xf4,0xf3,0xfd,0xe1,
        0xc5,0x91,0x39,0x72,0xe4,0xd3,0xbd,0x61,
        0xc6,0x97,0x35,0x6a,0xd4,0xb3,0x7d,0xfa,
        0xc7,0x95,0x31,0x62,0xc4,0x93,0x3d,0x7a,
        0xc8,0x8b,0x0d,0x1a,0x34,0x68,0xd0,0xbb,
        0xc9,0x89,0x09,0x12,0x24,0x48,0x90,0x3b,
        0xca,0x8f,0x05,0x0a,0x14,0x28,0x50,0xa0,
        0xcb,0x8d,0x01,0x02,0x04,0x08,0x10,0x20,
        0xcc,0x83,0x1d,0x3a,0x74,0xe8,0xcb,0x8d,
        0xcd,0x81,0x19,0x32,0x64,0xc8,0x8b,0x0d,
        0xce,0x87,0x15,0x2a,0x54,0xa8,0x4b,0x96,
        0xcf,0x85,0x11,0x22,0x44,0x88,0x0b,0x16,
        0xd0,0xbb,0x6d,0xda,0xaf,0x45,0x8a,0x0f,
        0xd1,0xb9,0x69,0xd2,0xbf,0x65,0xca,0x8f,
        0xd2,0xbf,0x65,0xca,0x8f,0x05,0x0a,0x14,
        0xd3,0xbd,0x61,0xc2,0x9f,0x25,0x4a,0x94,
        0xd4,0xb3,0x7d,0xfa,0xef,0xc5,0x91,0x39,
        0xd5,0xb1,0x79,0xf2,0xff,0xe5,0xd1,0xb9,
        0xd6,0xb7,0x75,0xea,0xcf,0x85,0x11,0x22,
        0xd7,0xb5,0x71,0xe2,0xdf,0xa5,0x51,0xa2,
        0xd8,0xab,0x4d,0x9a,0x2f,0x5e,0xbc,0x63,
        0xd9,0xa9,0x49,0x92,0x3f,0x7e,0xfc,0xe3,
        0xda,0xaf,0x45,0x8a,0x0f,0x1e,0x3c,0x78,
        0xdb,0xad,0x41,0x82,0x1f,0x3e,0x7c,0xf8,
        0xdc,0xa3,0x5d,0xba,0x6f,0xde,0xa7,0x55,
        0xdd,0xa1,0x59,0xb2,0x7f,0xfe,0xe7,0xd5,
        0xde,0xa7,0x55,0xaa,0x4f,0x9e,0x27,0x4e,
        0xdf,0xa5,0x51,0xa2,0x5f,0xbe,0x67,0xce,
        0xe0,0xdb,0xad,0x41,0x82,0x1f,0x3e,0x7c,
        0xe1,0xd9,0xa9,0x49,0x92,0x3f,0x7e,0xfc,
        0xe2,0xdf,0xa5,0x51,0xa2,0x5f,0xbe,0x67,
        0xe3,0xdd,0xa1,0x59,0xb2,0x7f,0xfe,0xe7,
        0xe4,0xd3,0xbd,0x61,0xc2,0x9f,0x25,0x4a,
        0xe5,0xd1,0xb9,0x69,0xd2,0xbf,0x65,0xca,
        0xe6,0xd7,0xb5,0x71,0xe2,0xdf,0xa5,0x51,
        0xe7,0xd5,0xb1,0x79,0xf2,0xff,0xe5,0xd1,
        0xe8,0xcb,0x8d,0x01,0x02,0x04,0x08,0x10,
        0xe9,0xc9,0x89,0x09,0x12,0x24,0x48,0x90,
        0xea,0xcf,0x85,0x11,0x22,0x44,0x88,0x0b,
        0xeb,0xcd,0x81,0x19,0x32,0x64,0xc8,0x8b,
        0xec,0xc3,0x9d,0x21,0x42,0x84,0x13,0x26,
        0xed,0xc1,0x99,0x29,0x52,0xa4,0x53,0xa6,
        0xee,0xc7,0x95,0x31,0x62,0xc4,0x93,0x3d,
        0xef,0xc5,0x91,0x39,0x72,0xe4,0xd3,0xbd,
        0xf0,0xfb,0xed,0xc1,0x99,0x29,0x52,0xa4,
        0xf1,0xf9,0xe9,0xc9,0x89,0x09,0x12,0x24,
        0xf2,0xff,0xe5,0xd1,0xb9,0x69,0xd2,0xbf,
        0xf3,0xfd,0xe1,0xd9,0xa9,0x49,0x92,0x3f,
        0xf4,0xf3,0xfd,0xe1,0xd9,0xa9,0x49,0x92,
        0xf5,0xf1,0xf9,0xe9,0xc9,0x89,0x09,0x12,
        0xf6,0xf7,0xf5,0xf1,0xf9,0xe9,0xc9,0x89,
        0xf7,0xf5,0xf1,0xf9,0xe9,0xc9,0x89,0x09,
        0xf8,0xeb,0xcd,0x81,0x19,0x32,0x64,0xc8,
        0xf9,0xe9,0xc9,0x89,0x09,0x12,0x24,0x48,
        0xfa,0xef,0xc5,0x91,0x39,0x72,0xe4,0xd3,
        0xfb,0xed,0xc1,0x99,0x29,0x52,0xa4,0x53,
        0xfc,0xe3,0xdd,0xa1,0x59,0xb2,0x7f,0xfe,
        0xfd,0xe1,0xd9,0xa9,0x49,0x92,0x3f,0x7e,
        0xfe,0xe7,0xd5,0xb1,0x79,0xf2,0xff,0xe5,
        0xff,0xe5,0xd1,0xb9,0x69,0xd2,0xbf,0x65,
};

// Warning, getting the inverse of a secret value using this table,
// would lead to non-constant-time implementation. Only accessing
// to public positions is allowed.
const uint8_t gf256_inverse_tab[256] = {
    0, 1, 141, 246, 203, 82, 123, 209, 232, 79, 41, 192, 176, 225, 229, 199,
    116, 180, 170, 75, 153, 43, 96, 95, 88, 63, 253, 204, 255, 64, 238, 178,
    58, 110, 90, 241, 85, 77, 168, 201, 193, 10, 152, 21, 48, 68, 162, 194,
    44, 69, 146, 108, 243, 57, 102, 66, 242, 53, 32, 111, 119, 187, 89, 25,
    29, 254, 55, 103, 45, 49, 245, 105, 167, 100, 171, 19, 84, 37, 233, 9,
    237, 92, 5, 202, 76, 36, 135, 191, 24, 62, 34, 240, 81, 236, 97, 23, 22,
    94, 175, 211, 73, 166, 54, 67, 244, 71, 145, 223, 51, 147, 33, 59, 121,
    183, 151, 133, 16, 181, 186, 60, 182, 112, 208, 6, 161, 250, 129, 130, 131,
    126, 127, 128, 150, 115, 190, 86, 155, 158, 149, 217, 247, 2, 185, 164, 222,
    106, 50, 109, 216, 138, 132, 114, 42, 20, 159, 136, 249, 220, 137, 154, 251,
    124, 46, 195, 143, 184, 101, 72, 38, 200, 18, 74, 206, 231, 210, 98, 12,
    224, 31, 239, 17, 117, 120, 113, 165, 142, 118, 61, 189, 188, 134, 87, 11,
    40, 47, 163, 218, 212, 228, 15, 169, 39, 83, 4, 27, 252, 172, 230, 122, 7,
    174, 99, 197, 219, 226, 234, 148, 139, 196, 213, 157, 248, 144, 107, 177, 13,
    214, 235, 198, 14, 207, 173, 8, 78, 215, 227, 93, 80, 30, 179, 91, 35, 56,
    52, 104, 70, 3, 140, 221, 156, 125, 160, 205, 26, 65, 28
};

/// \return a^{-1}
gf256 gf256_inverse(const gf256 a) {
    return gf256_inverse_tab[a];
}

gf256 gf256_add(const gf256 a,
               const gf256 b) {
    return a ^ b;
}

gf256 gf256_sub(const gf256 a,
               const gf256 b) {
    return a ^ b;
}

/// a*b via the lookup into the muliplication table of 16**i
/// multiplication is for a single element
gf256 gf256_mul(const gf256 a,
               const gf256 b) {
    const gf256 *p = &__gf256_mulbase[b * 8u];
    gf256 tmp = 0;
    tmp ^= (a &   1) ? p[0] : 0;
    tmp ^= (a &   2) ? p[1] : 0;
    tmp ^= (a &   4) ? p[2] : 0;
    tmp ^= (a &   8) ? p[3] : 0;
    tmp ^= (a &  16) ? p[4] : 0;
    tmp ^= (a &  32) ? p[5] : 0;
    tmp ^= (a &  64) ? p[6] : 0;
    tmp ^= (a & 128) ? p[7] : 0;
    return tmp;
}

/// a*b without a lookup table
gf256 gf256_mul_v2(const gf256 a,
                  const gf256 b) {
    gf256 r;
    r = (-(b>>7u     ) & a);
    r = (-(b>>6u & 1u) & a) ^ (-(r>>7u) & MODULUS) ^ (r+r);
    r = (-(b>>5u & 1u) & a) ^ (-(r>>7u) & MODULUS) ^ (r+r);
    r = (-(b>>4u & 1u) & a) ^ (-(r>>7u) & MODULUS) ^ (r+r);
    r = (-(b>>3u & 1u) & a) ^ (-(r>>7u) & MODULUS) ^ (r+r);
    r = (-(b>>2u & 1u) & a) ^ (-(r>>7u) & MODULUS) ^ (r+r);
    r = (-(b>>1u & 1u) & a) ^ (-(r>>7u) & MODULUS) ^ (r+r);
    return (-(b  & 1u) & a) ^ (-(r>>7u) & MODULUS) ^ (r+r);
}

/// \return a**2
gf256 gf256_squ(const gf256 a) {
    gf256 r8 = a&1u;
    r8 ^=  (a<<1u)&4u;            // x^1 -> x^2
    r8 ^=  (a<<2u)&(1u<<4u);      // x^2 -> x^4
    r8 ^=  (a<<3u)&(1u<<6u);      // x^3 -> x^6
    r8 ^= ((a>>4u)&1u)*0x1b;      // x^4 -> x^8   --> 0x1b
    r8 ^= ((a>>5u)&1u)*(0x1b<<2); // x^5 -> x^10  --> (0x1b<<2)
    r8 ^= ((a>>6u)&1u)*(0xab);    // x^6 -> x^12  --> (0xab)
    r8 ^= ((a>>7u)&1u)*(0x9a);    // x^7 -> x^14  --> (0x9a)
    return r8;
}


// addition and subtraction are always easy
uint64_t gf256v_add_u64(const uint64_t a,
                        const uint64_t b) {
    return a ^ b;
}

uint64_t gf256v_sub_64(const uint64_t a,
                       const uint64_t b) {
    return a ^ b;
}

uint64_t gf256v_mul_u64(uint64_t a, uint64_t b) {
    uint64_t ret = 0;
    for (uint32_t i = 0; i < 8u; ++i) {
        uint64_t t = gf256_mul(a >> (i*8u), b >> (i*8u));
        ret ^= t << (i*8u);
    }
    return ret;
}

/// vector*constant multiplication without table look
/// 8 GF(256) elements with a single element
uint64_t gf256v_scalar_u64(uint64_t a, uint8_t b) {
    const uint64_t mask_msb = 0x8080808080808080ULL;
    uint64_t a_msb;
    uint64_t a64 = a;
    uint64_t b32 = b;
    uint64_t r64 = a64*(b32&1);

    a_msb = a64&mask_msb;  // MSB, 7th bits
    a64 ^= a_msb;   // clear MSB
    a64 = (a64<<1)^((a_msb>>7)*0x1b);
    r64 ^= (a64)*((b32>>1)&1);

    a_msb = a64&mask_msb;  // MSB, 7th bits
    a64 ^= a_msb;   // clear MSB
    a64 = (a64<<1)^((a_msb>>7)*0x1b);
    r64 ^= (a64)*((b32>>2)&1);

    a_msb = a64&mask_msb;  // MSB, 7th bits
    a64 ^= a_msb;   // clear MSB
    a64 = (a64<<1)^((a_msb>>7)*0x1b);
    r64 ^= (a64)*((b32>>3)&1);

    a_msb = a64&mask_msb;  // MSB, 7th bits
    a64 ^= a_msb;   // clear MSB
    a64 = (a64<<1)^((a_msb>>7)*0x1b);
    r64 ^= (a64)*((b32>>4)&1);

    a_msb = a64&mask_msb;  // MSB, 7th bits
    a64 ^= a_msb;   // clear MSB
    a64 = (a64<<1)^((a_msb>>7)*0x1b);
    r64 ^= (a64)*((b32>>5)&1);

    a_msb = a64&mask_msb;  // MSB, 7th bits
    a64 ^= a_msb;   // clear MSB
    a64 = (a64<<1)^((a_msb>>7)*0x1b);
    r64 ^= (a64)*((b32>>6)&1);

    a_msb = a64&mask_msb;  // MSB, 7th bits
    a64 ^= a_msb;   // clear MSB
    a64 = (a64<<1)^((a_msb>>7)*0x1b);
    r64 ^= (a64)*((b32>>7)&1);

    return r64;
}
/// vector*constant multiplication using table lookup
/// \param a vector: 8 GF(256) elements
/// \param b constant: single GF(256) element
/// \return a*b
uint64_t gf256v_scalar_u64_v2(const uint64_t a,
                              const uint8_t b) {
    const uint8_t *p = &__gf256_mulbase[b*8];
    uint64_t tmp = 0;
    tmp ^= ((a & 0x0101010101010101) >> 0) * p[0];
    tmp ^= ((a & 0x0202020202020202) >> 1) * p[1];
    tmp ^= ((a & 0x0404040404040404) >> 2) * p[2];
    tmp ^= ((a & 0x0808080808080808) >> 3) * p[3];
    tmp ^= ((a & 0x1010101010101010) >> 4) * p[4];
    tmp ^= ((a & 0x2020202020202020) >> 5) * p[5];
    tmp ^= ((a & 0x4040404040404040) >> 6) * p[6];
    tmp ^= ((a & 0x8080808080808080) >> 7) * p[7];
    return tmp;
}

/// gf256 := gf2[X]/ (x^8+x^4+x^3+x+1)   // 0x11b , AES field
/// vector square using no table lookup
uint64_t gf256v_squ_u64(const uint64_t a) {
    uint32_t r64 = a&0x0101010101010101ULL;
    r64 ^= (a<<1)   &0x0404040404040404ULL; // x^1 -> x^2
    r64 ^= (a<<2)   &0x1010101010101010ULL; // x^2 -> x^4
    r64 ^= (a<<3)   &0x4040404040404040ULL; // x^3 -> x^6

    r64 ^= ((a>>4)&0x0101010101010101ULL)*0x1b;    	// x^4 -> x^8  --> 0x1b
    r64 ^= ((a>>5)&0x0101010101010101ULL)*(0x1b<<2);// x^5 -> x^10  --> (0x1b<<2)
    r64 ^= ((a>>6)&0x0101010101010101ULL)*(0xab);  	// x^6 -> x^12  --> (0xab)
    r64 ^= ((a>>7)&0x0101010101010101ULL)*(0x9a);  	// x^7 -> x^14  --> (0x9a)

    return r64;
}

/// non vector reduction
uint8_t gf256_reduce_u64(const uint64_t a) {
    uint32_t * aa = (uint32_t *)(&a);
    uint32_t r = aa[0]^aa[1];
    uint16_t *aaa = (uint16_t *)(&r);
    uint16_t rr = aaa[0] ^ aaa[1];
    uint8_t *rrr = (uint8_t *) (&rr);
    return rrr[0] ^ rrr[1];
}

#ifdef USE_AVX2
#include <immintrin.h>


const uint8_t __gf256_mulbase_avx2[256] __attribute__((aligned(32))) = {
        // repeated over each 128bit lane
        // 16**0 * i
        0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07, 0x08,0x09,0x0a,0x0b,0x0c,0x0d,0x0e,0x0f, 0x00,0x10,0x20,0x30,0x40,0x50,0x60,0x70, 0x80,0x90,0xa0,0xb0,0xc0,0xd0,0xe0,0xf0,
        // 16**1 * i
        0x00,0x10,0x20,0x30,0x40,0x50,0x60,0x70, 0x80,0x90,0xa0,0xb0,0xc0,0xd0,0xe0,0xf0, 0x00,0x1b,0x36,0x2d,0x6c,0x77,0x5a,0x41, 0xd8,0xc3,0xee,0xf5,0xb4,0xaf,0x82,0x99,
        0x00,0x02,0x04,0x06,0x08,0x0a,0x0c,0x0e, 0x10,0x12,0x14,0x16,0x18,0x1a,0x1c,0x1e, 0x00,0x20,0x40,0x60,0x80,0xa0,0xc0,0xe0, 0x1b,0x3b,0x5b,0x7b,0x9b,0xbb,0xdb,0xfb,
        0x00,0x20,0x40,0x60,0x80,0xa0,0xc0,0xe0, 0x1b,0x3b,0x5b,0x7b,0x9b,0xbb,0xdb,0xfb, 0x00,0x36,0x6c,0x5a,0xd8,0xee,0xb4,0x82, 0xab,0x9d,0xc7,0xf1,0x73,0x45,0x1f,0x29,
        0x00,0x04,0x08,0x0c,0x10,0x14,0x18,0x1c, 0x20,0x24,0x28,0x2c,0x30,0x34,0x38,0x3c, 0x00,0x40,0x80,0xc0,0x1b,0x5b,0x9b,0xdb, 0x36,0x76,0xb6,0xf6,0x2d,0x6d,0xad,0xed,
        0x00,0x40,0x80,0xc0,0x1b,0x5b,0x9b,0xdb, 0x36,0x76,0xb6,0xf6,0x2d,0x6d,0xad,0xed, 0x00,0x6c,0xd8,0xb4,0xab,0xc7,0x73,0x1f, 0x4d,0x21,0x95,0xf9,0xe6,0x8a,0x3e,0x52,
        0x00,0x08,0x10,0x18,0x20,0x28,0x30,0x38, 0x40,0x48,0x50,0x58,0x60,0x68,0x70,0x78, 0x00,0x80,0x1b,0x9b,0x36,0xb6,0x2d,0xad, 0x6c,0xec,0x77,0xf7,0x5a,0xda,0x41,0xc1,
        0x00,0x80,0x1b,0x9b,0x36,0xb6,0x2d,0xad, 0x6c,0xec,0x77,0xf7,0x5a,0xda,0x41,0xc1, 0x00,0xd8,0xab,0x73,0x4d,0x95,0xe6,0x3e, 0x9a,0x42,0x31,0xe9,0xd7,0x0f,0x7c,0xa4
};

/// gf256 := gf2[X]/ (x^8+x^4+x^3+x+1)   // 0x11b , AES field
__m256i gf256v_squ_u256(const __m256i a) {
#ifdef __AVX512VL__
    return _mm256_gf2p8mul_epi8(a,a);
#else
	const __m256i m1  = _mm256_set1_epi8(0x01);
	const __m256i m4  = _mm256_set1_epi8(0x04);
    const __m256i m10 = _mm256_set1_epi8(0x10);
    const __m256i m40 = _mm256_set1_epi8(0x40);
	__m256i r = a&m1;
	r ^= _mm256_slli_epi64(a, 1) & m4;
	r ^= _mm256_slli_epi64(a, 2) & m10;
	r ^= _mm256_slli_epi64(a, 3) & m40;
	
	r ^= _mm256_mullo_epi16(_mm256_srli_epi64(a, 4) & m1, _mm256_set1_epi16(0x1b));
	r ^= _mm256_mullo_epi16(_mm256_srli_epi64(a, 5) & m1, _mm256_set1_epi16((0x1b<<2u)));
	r ^= _mm256_mullo_epi16(_mm256_srli_epi64(a, 6) & m1, _mm256_set1_epi16(0xab));
	r ^= _mm256_mullo_epi16(_mm256_srli_epi64(a, 7) & m1, _mm256_set1_epi16(0x9a));

	return r;
#endif
}

/// full multiplication:
static inline __m256i gf256v_mul_u256_v2(const __m256i c,
                                      const __m256i b) {
//#ifdef __AVX512VL__
//    return _mm256_gf2p8mul_epi8(c, b);
//#endif
    const __m256i mask_msb  = _mm256_set1_epi8((char)0x80);
    const __m256i zero      = _mm256_set1_epi8(0x00);
    const __m256i mask      = _mm256_set1_epi8(0x1b);
    const __m256i bit       = _mm256_set1_epi8(0x01);
    __m256i a = c;
    __m256i tmp = a&bit, a_msb;
    // 0
    __m256i r = _mm256_sign_epi8(tmp, tmp) & b;

    // 1
    a_msb = a & mask_msb;
    a = a ^ a_msb;
    a = _mm256_slli_epi16(a, 1);
    a = a ^ _mm256_blendv_epi8(zero, mask, a_msb);
    r = r ^ _mm256_blendv_epi8(zero, a, _mm256_slli_epi16(b, 6));

    // 2
    a_msb = a & mask_msb;
    a = a ^ a_msb;
    a = _mm256_slli_epi16(a, 1);
    a = a ^ _mm256_blendv_epi8(zero, mask, a_msb);
    tmp = _mm256_slli_epi16(b, 5);
    r = r ^ _mm256_blendv_epi8(zero, a, tmp);

    // 3
    a_msb = a & mask_msb;
    a = a ^ a_msb;
    a = _mm256_slli_epi16(a, 1);
    a = a ^ _mm256_blendv_epi8(zero, mask, a_msb);
    r = r ^ _mm256_blendv_epi8(zero, a, _mm256_slli_epi16(b, 4));

    // 4
    a_msb = a & mask_msb;
    a = a ^ a_msb;
    a = _mm256_slli_epi16(a, 1);
    a = a ^ _mm256_blendv_epi8(zero, mask, a_msb);
    r = r ^ _mm256_blendv_epi8(zero, a, _mm256_slli_epi16(b, 3));

    // 5
    a_msb = a & mask_msb;
    a = a ^ a_msb;
    a = _mm256_slli_epi16(a, 1);
    a = a ^ _mm256_blendv_epi8(zero, mask, a_msb);
    r = r ^ _mm256_blendv_epi8(zero, a, _mm256_slli_epi16(b, 2));

    // 6
    a_msb = a & mask_msb;
    a = a ^ a_msb;
    a = _mm256_slli_epi16(a, 1);
    a = a ^ _mm256_blendv_epi8(zero, mask, a_msb);
    r = r ^ _mm256_blendv_epi8(zero, a, _mm256_slli_epi16(b, 1));

    // 7
    a_msb = a & mask_msb;
    a = a ^ a_msb;
    a = _mm256_slli_epi16(a, 1);
    a = a ^ _mm256_blendv_epi8(zero, mask, a_msb);
    r = r ^ _mm256_blendv_epi8(zero, a, b);

    return r;
}


/// same as above, but only sse
/// NOTE: uses scatter instruction based on b.
static inline __m128i gf256v_mul_u128(const __m128i a,
                                     const __m128i b) {
    // bitselection masks
    const __m128i mask1 = _mm_set1_epi8(0x01);

    // mask to get only the lowest 8bits of each gather instruction
    const __m128i mask = _mm_set1_epi32(0xff);

    __m128i tmp;
    __m128i data = _mm_i32gather_epi32((int const *)__gf256_mulbase, b, 8);
    __m128i p = _mm_and_si128(data, mask);

    tmp = _mm_mullo_epi32(_mm_and_si128(a, mask1), p);
    p = _mm_and_si128(_mm_srli_epi32(data, 8), mask);
    tmp = _mm_xor_si128(tmp, _mm_mullo_epi32(_mm_and_si128(_mm_srli_epi64(a, 1), mask1), p));
    p = _mm_and_si128(_mm_srli_epi32(data, 16), mask);
    tmp = _mm_xor_si128(tmp, _mm_mullo_epi32(_mm_and_si128(_mm_srli_epi64(a, 2), mask1), p));
    p = _mm_srli_epi32(data, 24);
    tmp = _mm_xor_si128(tmp, _mm_mullo_epi32(_mm_and_si128(_mm_srli_epi64(a, 3), mask1), p));

    data = _mm_i32gather_epi32((int const *)((uint8_t *)__gf256_mulbase + 4), b, 8);
    p = _mm_and_si128(data, mask);

    tmp = _mm_xor_si128(tmp, _mm_mullo_epi32(_mm_and_si128(_mm_srli_epi64(a, 4), mask1), p));
    p = _mm_and_si128(_mm_srli_epi32(data, 8), mask);
    tmp = _mm_xor_si128(tmp, _mm_mullo_epi32(_mm_and_si128(_mm_srli_epi64(a, 5), mask1), p));
    p = _mm_and_si128(_mm_srli_epi32(data, 16), mask);
    tmp = _mm_xor_si128(tmp, _mm_mullo_epi32(_mm_and_si128(_mm_srli_epi64(a, 6), mask1), p));
    p = _mm_srli_epi32(data, 24);
    tmp = _mm_xor_si128(tmp, _mm_mullo_epi32(_mm_and_si128(_mm_srli_epi64(a, 7), mask1), p));

    return tmp;
}


/// TODO bench
/// full multiplication:
static inline __m256i gf256_full_mul_simd(__m256i a, const __m256i b) {
    const __m256i mask_msb  = _mm256_set1_epi8((char)0x80);
    const __m256i zero      = _mm256_set1_epi8(0x00);
    const __m256i mask      = _mm256_set1_epi8(0x1b);
    const __m256i bit       = _mm256_set1_epi8(0x01);
    __m256i tmp = a&bit, a_msb;
    // 0
    __m256i r = _mm256_sign_epi8(tmp, tmp) & b;

    // 1
    a_msb = a & mask_msb;
    a = a ^ a_msb;
    a = _mm256_slli_epi16(a, 1);
    a = a ^ _mm256_blendv_epi8(zero, mask, a_msb);
    r = r ^ _mm256_blendv_epi8(zero, a, _mm256_slli_epi16(b, 6));

    // 2
    a_msb = a & mask_msb;
    a = a ^ a_msb;
    a = _mm256_slli_epi16(a, 1);
    a = a ^ _mm256_blendv_epi8(zero, mask, a_msb);
    tmp = _mm256_slli_epi16(b, 5);
    r = r ^ _mm256_blendv_epi8(zero, a, tmp);

    // 3
    a_msb = a & mask_msb;
    a = a ^ a_msb;
    a = _mm256_slli_epi16(a, 1);
    a = a ^ _mm256_blendv_epi8(zero, mask, a_msb);
    r = r ^ _mm256_blendv_epi8(zero, a, _mm256_slli_epi16(b, 4));

    // 4
    a_msb = a & mask_msb;
    a = a ^ a_msb;
    a = _mm256_slli_epi16(a, 1);
    a = a ^ _mm256_blendv_epi8(zero, mask, a_msb);
    r = r ^ _mm256_blendv_epi8(zero, a, _mm256_slli_epi16(b, 3));

    // 5
    a_msb = a & mask_msb;
    a = a ^ a_msb;
    a = _mm256_slli_epi16(a, 1);
    a = a ^ _mm256_blendv_epi8(zero, mask, a_msb);
    r = r ^ _mm256_blendv_epi8(zero, a, _mm256_slli_epi16(b, 2));

    // 6
    a_msb = a & mask_msb;
    a = a ^ a_msb;
    a = _mm256_slli_epi16(a, 1);
    a = a ^ _mm256_blendv_epi8(zero, mask, a_msb);
    r = r ^ _mm256_blendv_epi8(zero, a, _mm256_slli_epi16(b, 1));

    // 7
    a_msb = a & mask_msb;
    a = a ^ a_msb;
    a = _mm256_slli_epi16(a, 1);
    a = a ^ _mm256_blendv_epi8(zero, mask, a_msb);
    r = r ^ _mm256_blendv_epi8(zero, a, b);

    return r;
}

/// \param a
/// \param b
/// \return
__m256i gf256v_mul_u256(const __m256i a,
                        const __m256i b) {
//#ifdef __AVX512VL__
//    return _mm256_gf2p8mul_epi8(a, b);
//#endif
    const __m256i zero = _mm256_set1_epi32(0),
            mask = _mm256_set1_epi8(0x1B);
    __m256i r;

    r = _mm256_blendv_epi8(zero, a, b);
    r = _mm256_blendv_epi8(zero, a, _mm256_slli_epi16(b, 1)) ^ _mm256_blendv_epi8(zero, mask, r) ^ _mm256_add_epi8(r, r);
    r = _mm256_blendv_epi8(zero, a, _mm256_slli_epi16(b, 2)) ^ _mm256_blendv_epi8(zero, mask, r) ^ _mm256_add_epi8(r, r);
    r = _mm256_blendv_epi8(zero, a, _mm256_slli_epi16(b, 3)) ^ _mm256_blendv_epi8(zero, mask, r) ^ _mm256_add_epi8(r, r);
    r = _mm256_blendv_epi8(zero, a, _mm256_slli_epi16(b, 4)) ^ _mm256_blendv_epi8(zero, mask, r) ^ _mm256_add_epi8(r, r);
    r = _mm256_blendv_epi8(zero, a, _mm256_slli_epi16(b, 5)) ^ _mm256_blendv_epi8(zero, mask, r) ^ _mm256_add_epi8(r, r);
    r = _mm256_blendv_epi8(zero, a, _mm256_slli_epi16(b, 6)) ^ _mm256_blendv_epi8(zero, mask, r) ^ _mm256_add_epi8(r, r);
    r = _mm256_blendv_epi8(zero, a, _mm256_slli_epi16(b, 7)) ^ _mm256_blendv_epi8(zero, mask, r) ^ _mm256_add_epi8(r, r);
    return r;
}


/// NOTE: only the 32bit limbs in b are used. and those limbs must be < 256
/// (8 limbs in 32bit in a) * 8 limbs multiplication
/// this is the avx version of `gf256v_scalar_u64_v2`.
/// memory is loaded depending on b. So unsafe if its secret
__m256i gf256v_mul_u256_v3(__m256i a, __m256i b) {
#ifdef __AVX512VL__
    return _mm256_gf2p8mul_epi8(a, b);
#else
	// bitselection masks
    const __m256i mask1 = _mm256_set1_epi8(0x01);

	// mask to get only the lowest 8bits of each gather instruction
    const __m256i mask = _mm256_set1_epi32(0xff);

    __m256i tmp;
    __m256i data = _mm256_i32gather_epi32((int const *)__gf256_mulbase, b, 8);
    __m256i p = _mm256_and_si256(data, mask);

    tmp = _mm256_mullo_epi32(_mm256_and_si256(a, mask1), p);
    p = _mm256_and_si256(_mm256_srli_epi32(data, 8), mask);
    tmp = _mm256_xor_si256(tmp, _mm256_mullo_epi32(_mm256_and_si256(_mm256_srli_epi64(a, 1), mask1), p));
    p = _mm256_and_si256(_mm256_srli_epi32(data, 16), mask);
    tmp = _mm256_xor_si256(tmp, _mm256_mullo_epi32(_mm256_and_si256(_mm256_srli_epi64(a, 2), mask1), p));
    p = _mm256_srli_epi32(data, 24);
    tmp = _mm256_xor_si256(tmp, _mm256_mullo_epi32(_mm256_and_si256(_mm256_srli_epi64(a, 3), mask1), p));

    data = _mm256_i32gather_epi32((int const *)((uint8_t *)__gf256_mulbase + 4), b, 8);
    p = _mm256_and_si256(data, mask);

    tmp = _mm256_xor_si256(tmp, _mm256_mullo_epi32(_mm256_and_si256(_mm256_srli_epi64(a, 4), mask1), p));
    p = _mm256_and_si256(_mm256_srli_epi32(data, 8), mask);
    tmp = _mm256_xor_si256(tmp, _mm256_mullo_epi32(_mm256_and_si256(_mm256_srli_epi64(a, 5), mask1), p));
    p = _mm256_and_si256(_mm256_srli_epi32(data, 16), mask);
    tmp = _mm256_xor_si256(tmp, _mm256_mullo_epi32(_mm256_and_si256(_mm256_srli_epi64(a, 6), mask1), p));
    p = _mm256_srli_epi32(data, 24);
    tmp = _mm256_xor_si256(tmp, _mm256_mullo_epi32(_mm256_and_si256(_mm256_srli_epi64(a, 7), mask1), p));

    return tmp;
#endif
}

// 6 instructions
__m256i linear_transform_8x8_256b (
		__m256i tab_l, __m256i tab_h, __m256i v, __m256i mask_f){
    return _mm256_shuffle_epi8(tab_l, v & mask_f) ^ 
		   _mm256_shuffle_epi8(tab_h, _mm256_srli_epi16(v, 4) & mask_f);
}


// load memory with address depended on the value of a. unsafe if a is a secret.
__m256i tbl32_gf256_mul_const(unsigned char a , __m256i b) {
    const __m256i tab = _mm256_load_si256((__m256i const *)(__gf256_mul + ((unsigned)a)*32 ));
    const __m256i tab_l = _mm256_permute2x128_si256( tab , tab , 0 );
    const __m256i tab_h = _mm256_permute2x128_si256( tab , tab , 0x11 );

    return linear_transform_8x8_256b(tab_l, tab_h, b, _mm256_set1_epi8(0xf));
}

// generate multiplication table
__m256i tbl32_gf256_multab(uint8_t b) {
#if 1
// faster
    __m256i bx = _mm256_set1_epi16( b );
    __m256i b1 = _mm256_srli_epi16( bx , 1 );

    __m256i tab0 = _mm256_load_si256((__m256i const *) (__gf256_mulbase + 32*0));
    __m256i tab1 = _mm256_load_si256((__m256i const *) (__gf256_mulbase + 32*1));
    __m256i tab2 = _mm256_load_si256((__m256i const *) (__gf256_mulbase + 32*2));
    __m256i tab3 = _mm256_load_si256((__m256i const *) (__gf256_mulbase + 32*3));
    __m256i tab4 = _mm256_load_si256((__m256i const *) (__gf256_mulbase + 32*4));
    __m256i tab5 = _mm256_load_si256((__m256i const *) (__gf256_mulbase + 32*5));
    __m256i tab6 = _mm256_load_si256((__m256i const *) (__gf256_mulbase + 32*6));
    __m256i tab7 = _mm256_load_si256((__m256i const *) (__gf256_mulbase + 32*7));

    __m256i mask_1  = _mm256_set1_epi16(1);
    __m256i mask_4  = _mm256_set1_epi16(4);
    __m256i mask_16 = _mm256_set1_epi16(16);
    __m256i mask_64 = _mm256_set1_epi16(64);
    __m256i mask_0  = _mm256_setzero_si256();

    return ( tab0 & _mm256_cmpgt_epi16( bx&mask_1  , mask_0) )
           ^ ( tab1 & _mm256_cmpgt_epi16( b1&mask_1  , mask_0) )
           ^ ( tab2 & _mm256_cmpgt_epi16( bx&mask_4  , mask_0) )
           ^ ( tab3 & _mm256_cmpgt_epi16( b1&mask_4  , mask_0) )
           ^ ( tab4 & _mm256_cmpgt_epi16( bx&mask_16 , mask_0) )
           ^ ( tab5 & _mm256_cmpgt_epi16( b1&mask_16 , mask_0) )
           ^ ( tab6 & _mm256_cmpgt_epi16( bx&mask_64 , mask_0) )
           ^ ( tab7 & _mm256_cmpgt_epi16( b1&mask_64 , mask_0) );
#else
    __m256i bx = _mm256_set1_epi8( b );
    __m256i mask = _mm256_set1_epi8(1);

	return ( _mm256_load_si256((__m256i const *) (__gf256_mulbase + 32*0)) & _mm256_cmpeq_epi8(mask,bx&mask) )
		^ ( _mm256_load_si256((__m256i const *) (__gf256_mulbase + 32*1)) & _mm256_cmpeq_epi8(mask,_mm256_srli_epi16(bx,1)&mask) )
		^ ( _mm256_load_si256((__m256i const *) (__gf256_mulbase + 32*2)) & _mm256_cmpeq_epi8(mask,_mm256_srli_epi16(bx,2)&mask) )
		^ ( _mm256_load_si256((__m256i const *) (__gf256_mulbase + 32*3)) & _mm256_cmpeq_epi8(mask,_mm256_srli_epi16(bx,3)&mask) )
		^ ( _mm256_load_si256((__m256i const *) (__gf256_mulbase + 32*4)) & _mm256_cmpeq_epi8(mask,_mm256_srli_epi16(bx,4)&mask) )
		^ ( _mm256_load_si256((__m256i const *) (__gf256_mulbase + 32*5)) & _mm256_cmpeq_epi8(mask,_mm256_srli_epi16(bx,5)&mask) )
		^ ( _mm256_load_si256((__m256i const *) (__gf256_mulbase + 32*6)) & _mm256_cmpeq_epi8(mask,_mm256_srli_epi16(bx,6)&mask) )
		^ ( _mm256_load_si256((__m256i const *) (__gf256_mulbase + 32*7)) & _mm256_cmpeq_epi8(mask,_mm256_srli_epi16(bx,7)&mask) );
#endif
}

__m256i gf256v_mul_scalar_u256(__m256i a, uint8_t _b) {
    const __m256i m_tab = tbl32_gf256_multab(_b);
    const __m256i ml = _mm256_permute2x128_si256(m_tab, m_tab, 0);
    const __m256i mh = _mm256_permute2x128_si256(m_tab, m_tab, 0x11);
    const __m256i mask = _mm256_set1_epi8(0xf);

    return linear_transform_8x8_256b(ml, mh, a, mask);
}


/// out = in1 ^ in2
static inline void gf256_vector_add_u256(gf256 *out,
                                         const gf256 *in1,
                                         const gf256 *in2,
                                         const size_t bytes) {
    size_t i = bytes;
    // avx2 code
    while (i >= 32u) {
        _mm256_storeu_si256((__m256i *)out,
                            _mm256_loadu_si256((__m256i *)in1) ^
                            _mm256_loadu_si256((__m256i *)in2));
        i -= 32u;
        in1 += 32u;
        in2 += 32u;
        out += 32u;
    }

    // sse code
    while(i >= 16u) {
        _mm_storeu_si128((__m128i *)out,
                         _mm_loadu_si128((__m128i *)in1) ^
                         _mm_loadu_si128((__m128i *)in2));
        in1 += 16u;
        in2 += 16u;
        out += 16u;
        i -= 16;
    }

    for(uint32_t j = 0; j<i; j++) {
        out[j] = in1[j] ^ in2[j];
    }
}

/// out[i] = in1[i] + scalar*in2[i] for all i = 0...bytes-1
static inline void gf256_vector_add_scalar_u256(gf256 *out,
                                                const gf256 *in1,
                                                const gf256 scalar,
                                                const gf256 *in2,
                                                const size_t bytes) {
    size_t i = bytes;
    __m256i s256 = _mm256_set1_epi32(scalar), tmp;
    __m128i s128 = _mm_set1_epi32(scalar), tmp128;

    // avx2 code
    while (i >= 32u) {
        tmp = gf256v_mul_u256(_mm256_loadu_si256((__m256i *)in2), s256);
        _mm256_storeu_si256((__m256i *)out, _mm256_loadu_si256((__m256i *)in1) ^ tmp);
        i -= 32u;
        in1 += 32u;
        in2 += 32u;
        out += 32u;
    }

    // sse code
    while(i >= 16u) {
        tmp128 = gf256v_mul_u128(_mm_loadu_si128((__m128i *)in2), s128);
        _mm_storeu_si128((__m128i *)out, _mm_loadu_si128((__m128i *)in1) ^ tmp128);
        in1 += 16u;
        in2 += 16u;
        out += 16u;
        i -= 16;
    }

    for(uint32_t j = 0; j<i; j++) {
        out[j] = in1[j] ^ gf256_mul(scalar, in2[j]);
    }
}


#elif defined(USE_NEON)
// TODO
#endif // end avx/neon


#ifdef __AVX512VL__

/// \return a * b
static inline __m512i gf256v_mul_u512(const __m512i a,
                                      const __m512i b) {
    return _mm512_gf2p8mul_epi8(a, b);
}

/// out = in1 ^ in2
static inline void gf256v_vector_add_u512(gf256 *out,
                                          const gf256 *in1,
                                          const gf256 *in2,
                                          const size_t bytes) {
    size_t i = bytes;
    // avx512 code
    while (i >= 64u) {
        _mm512_storeu_si512((__m512i *)out,
                            _mm512_loadu_si512((__m512i *)in1) ^
                            _mm512_loadu_si512((__m512i *)in2));
        i   -= 64u;
        in1 += 64u;
        in2 += 64u;
        out += 64u;
    }

    // avx2 code
    while (i >= 32u) {
        _mm256_storeu_si256((__m256i *)out,
                            _mm256_loadu_si256((__m256i *)in1) ^
                            _mm256_loadu_si256((__m256i *)in2));
        i -= 32u;
        in1 += 32u;
        in2 += 32u;
        out += 32u;
    }

    // sse code
    while(i >= 16u) {
        _mm_storeu_si128((__m128i *)out,
                         _mm_loadu_si128((__m128i *)in1) ^
                         _mm_loadu_si128((__m128i *)in2));
        in1 += 16u;
        in2 += 16u;
        out += 16u;
        i -= 16;
    }

    for(uint32_t j = 0; j<i; j++) {
        out[j] = in1[j] ^ in2[j];
    }
}

/// out = in1 ^ scalar* in2
static inline void gf256_vector_add_scalar_u512(gf256 *out,
                                                const gf256 *in1,
                                                const gf256 scalar,
                                                const gf256 *in2,
                                                const size_t bytes) {
    size_t i = bytes;
    const __m512i s = _mm512_set1_epi8(scalar);

    // avx512 code
    while (i >= 64u) {
        const __m512i tmp = gf256v_mul_u512(_mm512_loadu_si512((__m512i *)in2), s);
        _mm512_storeu_si512((__m512i *)out, _mm512_loadu_si512((__m512i *)in1) ^ tmp);
        i   -= 64u;
        in1 += 64u;
        in2 += 64u;
        out += 64u;
    }

    uint8_t tmp[64];
    for (uint32_t j = 0; j < i; ++j) {
        tmp[j] = in2[j];
    }

    const __m512i t = gf256v_mul_u512(_mm512_loadu_si512((__m512i *)tmp), s);
    _mm512_storeu_si512((__m512i *)out, t);

    for (uint32_t j = 0; j < i; ++j) {
        out[j] = in1[j] ^ tmp[j];
    }
}

#endif
#undef MODULUS
#endif // end namespace
