#ifndef FQ_ARITHMETIC_ARITH_H
#define FQ_ARITHMETIC_ARITH_H

#include <stdint.h>

// sources:
// https://github.com/moepinet/libmoepgf
// https://github.com/PQCMayo/MAYO-C

const uint8_t __gf256_mulbase_avx[256] __attribute__((aligned(32))) = {
        0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07, 0x08,0x09,0x0a,0x0b,0x0c,0x0d,0x0e,0x0f, 0x00,0x10,0x20,0x30,0x40,0x50,0x60,0x70, 0x80,0x90,0xa0,0xb0,0xc0,0xd0,0xe0,0xf0,
        0x00,0x10,0x20,0x30,0x40,0x50,0x60,0x70, 0x80,0x90,0xa0,0xb0,0xc0,0xd0,0xe0,0xf0, 0x00,0x1b,0x36,0x2d,0x6c,0x77,0x5a,0x41, 0xd8,0xc3,0xee,0xf5,0xb4,0xaf,0x82,0x99,
        0x00,0x02,0x04,0x06,0x08,0x0a,0x0c,0x0e, 0x10,0x12,0x14,0x16,0x18,0x1a,0x1c,0x1e, 0x00,0x20,0x40,0x60,0x80,0xa0,0xc0,0xe0, 0x1b,0x3b,0x5b,0x7b,0x9b,0xbb,0xdb,0xfb,
        0x00,0x20,0x40,0x60,0x80,0xa0,0xc0,0xe0, 0x1b,0x3b,0x5b,0x7b,0x9b,0xbb,0xdb,0xfb, 0x00,0x36,0x6c,0x5a,0xd8,0xee,0xb4,0x82, 0xab,0x9d,0xc7,0xf1,0x73,0x45,0x1f,0x29,
        0x00,0x04,0x08,0x0c,0x10,0x14,0x18,0x1c, 0x20,0x24,0x28,0x2c,0x30,0x34,0x38,0x3c, 0x00,0x40,0x80,0xc0,0x1b,0x5b,0x9b,0xdb, 0x36,0x76,0xb6,0xf6,0x2d,0x6d,0xad,0xed,
        0x00,0x40,0x80,0xc0,0x1b,0x5b,0x9b,0xdb, 0x36,0x76,0xb6,0xf6,0x2d,0x6d,0xad,0xed, 0x00,0x6c,0xd8,0xb4,0xab,0xc7,0x73,0x1f, 0x4d,0x21,0x95,0xf9,0xe6,0x8a,0x3e,0x52,
        0x00,0x08,0x10,0x18,0x20,0x28,0x30,0x38, 0x40,0x48,0x50,0x58,0x60,0x68,0x70,0x78, 0x00,0x80,0x1b,0x9b,0x36,0xb6,0x2d,0xad, 0x6c,0xec,0x77,0xf7,0x5a,0xda,0x41,0xc1,
        0x00,0x80,0x1b,0x9b,0x36,0xb6,0x2d,0xad, 0x6c,0xec,0x77,0xf7,0x5a,0xda,0x41,0xc1, 0x00,0xd8,0xab,0x73,0x4d,0x95,0xe6,0x3e, 0x9a,0x42,0x31,0xe9,0xd7,0x0f,0x7c,0xa4
};

const uint8_t __gf256_mulbase[] = {
        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
        0x01,0x02,0x04,0x08,0x10,0x20,0x40,0x80,
        0x02,0x04,0x08,0x10,0x20,0x40,0x80,0x1b,
        0x03,0x06,0x0c,0x18,0x30,0x60,0xc0,0x9b,
        0x04,0x08,0x10,0x20,0x40,0x80,0x1b,0x36,
        0x05,0x0a,0x14,0x28,0x50,0xa0,0x5b,0xb6,
        0x06,0x0c,0x18,0x30,0x60,0xc0,0x9b,0x2d,
        0x07,0x0e,0x1c,0x38,0x70,0xe0,0xdb,0xad,
        0x08,0x10,0x20,0x40,0x80,0x1b,0x36,0x6c,
        0x09,0x12,0x24,0x48,0x90,0x3b,0x76,0xec,
        0x0a,0x14,0x28,0x50,0xa0,0x5b,0xb6,0x77,
        0x0b,0x16,0x2c,0x58,0xb0,0x7b,0xf6,0xf7,
        0x0c,0x18,0x30,0x60,0xc0,0x9b,0x2d,0x5a,
        0x0d,0x1a,0x34,0x68,0xd0,0xbb,0x6d,0xda,
        0x0e,0x1c,0x38,0x70,0xe0,0xdb,0xad,0x41,
        0x0f,0x1e,0x3c,0x78,0xf0,0xfb,0xed,0xc1,
        0x10,0x20,0x40,0x80,0x1b,0x36,0x6c,0xd8,
        0x11,0x22,0x44,0x88,0x0b,0x16,0x2c,0x58,
        0x12,0x24,0x48,0x90,0x3b,0x76,0xec,0xc3,
        0x13,0x26,0x4c,0x98,0x2b,0x56,0xac,0x43,
        0x14,0x28,0x50,0xa0,0x5b,0xb6,0x77,0xee,
        0x15,0x2a,0x54,0xa8,0x4b,0x96,0x37,0x6e,
        0x16,0x2c,0x58,0xb0,0x7b,0xf6,0xf7,0xf5,
        0x17,0x2e,0x5c,0xb8,0x6b,0xd6,0xb7,0x75,
        0x18,0x30,0x60,0xc0,0x9b,0x2d,0x5a,0xb4,
        0x19,0x32,0x64,0xc8,0x8b,0x0d,0x1a,0x34,
        0x1a,0x34,0x68,0xd0,0xbb,0x6d,0xda,0xaf,
        0x1b,0x36,0x6c,0xd8,0xab,0x4d,0x9a,0x2f,
        0x1c,0x38,0x70,0xe0,0xdb,0xad,0x41,0x82,
        0x1d,0x3a,0x74,0xe8,0xcb,0x8d,0x01,0x02,
        0x1e,0x3c,0x78,0xf0,0xfb,0xed,0xc1,0x99,
        0x1f,0x3e,0x7c,0xf8,0xeb,0xcd,0x81,0x19,
        0x20,0x40,0x80,0x1b,0x36,0x6c,0xd8,0xab,
        0x21,0x42,0x84,0x13,0x26,0x4c,0x98,0x2b,
        0x22,0x44,0x88,0x0b,0x16,0x2c,0x58,0xb0,
        0x23,0x46,0x8c,0x03,0x06,0x0c,0x18,0x30,
        0x24,0x48,0x90,0x3b,0x76,0xec,0xc3,0x9d,
        0x25,0x4a,0x94,0x33,0x66,0xcc,0x83,0x1d,
        0x26,0x4c,0x98,0x2b,0x56,0xac,0x43,0x86,
        0x27,0x4e,0x9c,0x23,0x46,0x8c,0x03,0x06,
        0x28,0x50,0xa0,0x5b,0xb6,0x77,0xee,0xc7,
        0x29,0x52,0xa4,0x53,0xa6,0x57,0xae,0x47,
        0x2a,0x54,0xa8,0x4b,0x96,0x37,0x6e,0xdc,
        0x2b,0x56,0xac,0x43,0x86,0x17,0x2e,0x5c,
        0x2c,0x58,0xb0,0x7b,0xf6,0xf7,0xf5,0xf1,
        0x2d,0x5a,0xb4,0x73,0xe6,0xd7,0xb5,0x71,
        0x2e,0x5c,0xb8,0x6b,0xd6,0xb7,0x75,0xea,
        0x2f,0x5e,0xbc,0x63,0xc6,0x97,0x35,0x6a,
        0x30,0x60,0xc0,0x9b,0x2d,0x5a,0xb4,0x73,
        0x31,0x62,0xc4,0x93,0x3d,0x7a,0xf4,0xf3,
        0x32,0x64,0xc8,0x8b,0x0d,0x1a,0x34,0x68,
        0x33,0x66,0xcc,0x83,0x1d,0x3a,0x74,0xe8,
        0x34,0x68,0xd0,0xbb,0x6d,0xda,0xaf,0x45,
        0x35,0x6a,0xd4,0xb3,0x7d,0xfa,0xef,0xc5,
        0x36,0x6c,0xd8,0xab,0x4d,0x9a,0x2f,0x5e,
        0x37,0x6e,0xdc,0xa3,0x5d,0xba,0x6f,0xde,
        0x38,0x70,0xe0,0xdb,0xad,0x41,0x82,0x1f,
        0x39,0x72,0xe4,0xd3,0xbd,0x61,0xc2,0x9f,
        0x3a,0x74,0xe8,0xcb,0x8d,0x01,0x02,0x04,
        0x3b,0x76,0xec,0xc3,0x9d,0x21,0x42,0x84,
        0x3c,0x78,0xf0,0xfb,0xed,0xc1,0x99,0x29,
        0x3d,0x7a,0xf4,0xf3,0xfd,0xe1,0xd9,0xa9,
        0x3e,0x7c,0xf8,0xeb,0xcd,0x81,0x19,0x32,
        0x3f,0x7e,0xfc,0xe3,0xdd,0xa1,0x59,0xb2,
        0x40,0x80,0x1b,0x36,0x6c,0xd8,0xab,0x4d,
        0x41,0x82,0x1f,0x3e,0x7c,0xf8,0xeb,0xcd,
        0x42,0x84,0x13,0x26,0x4c,0x98,0x2b,0x56,
        0x43,0x86,0x17,0x2e,0x5c,0xb8,0x6b,0xd6,
        0x44,0x88,0x0b,0x16,0x2c,0x58,0xb0,0x7b,
        0x45,0x8a,0x0f,0x1e,0x3c,0x78,0xf0,0xfb,
        0x46,0x8c,0x03,0x06,0x0c,0x18,0x30,0x60,
        0x47,0x8e,0x07,0x0e,0x1c,0x38,0x70,0xe0,
        0x48,0x90,0x3b,0x76,0xec,0xc3,0x9d,0x21,
        0x49,0x92,0x3f,0x7e,0xfc,0xe3,0xdd,0xa1,
        0x4a,0x94,0x33,0x66,0xcc,0x83,0x1d,0x3a,
        0x4b,0x96,0x37,0x6e,0xdc,0xa3,0x5d,0xba,
        0x4c,0x98,0x2b,0x56,0xac,0x43,0x86,0x17,
        0x4d,0x9a,0x2f,0x5e,0xbc,0x63,0xc6,0x97,
        0x4e,0x9c,0x23,0x46,0x8c,0x03,0x06,0x0c,
        0x4f,0x9e,0x27,0x4e,0x9c,0x23,0x46,0x8c,
        0x50,0xa0,0x5b,0xb6,0x77,0xee,0xc7,0x95,
        0x51,0xa2,0x5f,0xbe,0x67,0xce,0x87,0x15,
        0x52,0xa4,0x53,0xa6,0x57,0xae,0x47,0x8e,
        0x53,0xa6,0x57,0xae,0x47,0x8e,0x07,0x0e,
        0x54,0xa8,0x4b,0x96,0x37,0x6e,0xdc,0xa3,
        0x55,0xaa,0x4f,0x9e,0x27,0x4e,0x9c,0x23,
        0x56,0xac,0x43,0x86,0x17,0x2e,0x5c,0xb8,
        0x57,0xae,0x47,0x8e,0x07,0x0e,0x1c,0x38,
        0x58,0xb0,0x7b,0xf6,0xf7,0xf5,0xf1,0xf9,
        0x59,0xb2,0x7f,0xfe,0xe7,0xd5,0xb1,0x79,
        0x5a,0xb4,0x73,0xe6,0xd7,0xb5,0x71,0xe2,
        0x5b,0xb6,0x77,0xee,0xc7,0x95,0x31,0x62,
        0x5c,0xb8,0x6b,0xd6,0xb7,0x75,0xea,0xcf,
        0x5d,0xba,0x6f,0xde,0xa7,0x55,0xaa,0x4f,
        0x5e,0xbc,0x63,0xc6,0x97,0x35,0x6a,0xd4,
        0x5f,0xbe,0x67,0xce,0x87,0x15,0x2a,0x54,
        0x60,0xc0,0x9b,0x2d,0x5a,0xb4,0x73,0xe6,
        0x61,0xc2,0x9f,0x25,0x4a,0x94,0x33,0x66,
        0x62,0xc4,0x93,0x3d,0x7a,0xf4,0xf3,0xfd,
        0x63,0xc6,0x97,0x35,0x6a,0xd4,0xb3,0x7d,
        0x64,0xc8,0x8b,0x0d,0x1a,0x34,0x68,0xd0,
        0x65,0xca,0x8f,0x05,0x0a,0x14,0x28,0x50,
        0x66,0xcc,0x83,0x1d,0x3a,0x74,0xe8,0xcb,
        0x67,0xce,0x87,0x15,0x2a,0x54,0xa8,0x4b,
        0x68,0xd0,0xbb,0x6d,0xda,0xaf,0x45,0x8a,
        0x69,0xd2,0xbf,0x65,0xca,0x8f,0x05,0x0a,
        0x6a,0xd4,0xb3,0x7d,0xfa,0xef,0xc5,0x91,
        0x6b,0xd6,0xb7,0x75,0xea,0xcf,0x85,0x11,
        0x6c,0xd8,0xab,0x4d,0x9a,0x2f,0x5e,0xbc,
        0x6d,0xda,0xaf,0x45,0x8a,0x0f,0x1e,0x3c,
        0x6e,0xdc,0xa3,0x5d,0xba,0x6f,0xde,0xa7,
        0x6f,0xde,0xa7,0x55,0xaa,0x4f,0x9e,0x27,
        0x70,0xe0,0xdb,0xad,0x41,0x82,0x1f,0x3e,
        0x71,0xe2,0xdf,0xa5,0x51,0xa2,0x5f,0xbe,
        0x72,0xe4,0xd3,0xbd,0x61,0xc2,0x9f,0x25,
        0x73,0xe6,0xd7,0xb5,0x71,0xe2,0xdf,0xa5,
        0x74,0xe8,0xcb,0x8d,0x01,0x02,0x04,0x08,
        0x75,0xea,0xcf,0x85,0x11,0x22,0x44,0x88,
        0x76,0xec,0xc3,0x9d,0x21,0x42,0x84,0x13,
        0x77,0xee,0xc7,0x95,0x31,0x62,0xc4,0x93,
        0x78,0xf0,0xfb,0xed,0xc1,0x99,0x29,0x52,
        0x79,0xf2,0xff,0xe5,0xd1,0xb9,0x69,0xd2,
        0x7a,0xf4,0xf3,0xfd,0xe1,0xd9,0xa9,0x49,
        0x7b,0xf6,0xf7,0xf5,0xf1,0xf9,0xe9,0xc9,
        0x7c,0xf8,0xeb,0xcd,0x81,0x19,0x32,0x64,
        0x7d,0xfa,0xef,0xc5,0x91,0x39,0x72,0xe4,
        0x7e,0xfc,0xe3,0xdd,0xa1,0x59,0xb2,0x7f,
        0x7f,0xfe,0xe7,0xd5,0xb1,0x79,0xf2,0xff,
        0x80,0x1b,0x36,0x6c,0xd8,0xab,0x4d,0x9a,
        0x81,0x19,0x32,0x64,0xc8,0x8b,0x0d,0x1a,
        0x82,0x1f,0x3e,0x7c,0xf8,0xeb,0xcd,0x81,
        0x83,0x1d,0x3a,0x74,0xe8,0xcb,0x8d,0x01,
        0x84,0x13,0x26,0x4c,0x98,0x2b,0x56,0xac,
        0x85,0x11,0x22,0x44,0x88,0x0b,0x16,0x2c,
        0x86,0x17,0x2e,0x5c,0xb8,0x6b,0xd6,0xb7,
        0x87,0x15,0x2a,0x54,0xa8,0x4b,0x96,0x37,
        0x88,0x0b,0x16,0x2c,0x58,0xb0,0x7b,0xf6,
        0x89,0x09,0x12,0x24,0x48,0x90,0x3b,0x76,
        0x8a,0x0f,0x1e,0x3c,0x78,0xf0,0xfb,0xed,
        0x8b,0x0d,0x1a,0x34,0x68,0xd0,0xbb,0x6d,
        0x8c,0x03,0x06,0x0c,0x18,0x30,0x60,0xc0,
        0x8d,0x01,0x02,0x04,0x08,0x10,0x20,0x40,
        0x8e,0x07,0x0e,0x1c,0x38,0x70,0xe0,0xdb,
        0x8f,0x05,0x0a,0x14,0x28,0x50,0xa0,0x5b,
        0x90,0x3b,0x76,0xec,0xc3,0x9d,0x21,0x42,
        0x91,0x39,0x72,0xe4,0xd3,0xbd,0x61,0xc2,
        0x92,0x3f,0x7e,0xfc,0xe3,0xdd,0xa1,0x59,
        0x93,0x3d,0x7a,0xf4,0xf3,0xfd,0xe1,0xd9,
        0x94,0x33,0x66,0xcc,0x83,0x1d,0x3a,0x74,
        0x95,0x31,0x62,0xc4,0x93,0x3d,0x7a,0xf4,
        0x96,0x37,0x6e,0xdc,0xa3,0x5d,0xba,0x6f,
        0x97,0x35,0x6a,0xd4,0xb3,0x7d,0xfa,0xef,
        0x98,0x2b,0x56,0xac,0x43,0x86,0x17,0x2e,
        0x99,0x29,0x52,0xa4,0x53,0xa6,0x57,0xae,
        0x9a,0x2f,0x5e,0xbc,0x63,0xc6,0x97,0x35,
        0x9b,0x2d,0x5a,0xb4,0x73,0xe6,0xd7,0xb5,
        0x9c,0x23,0x46,0x8c,0x03,0x06,0x0c,0x18,
        0x9d,0x21,0x42,0x84,0x13,0x26,0x4c,0x98,
        0x9e,0x27,0x4e,0x9c,0x23,0x46,0x8c,0x03,
        0x9f,0x25,0x4a,0x94,0x33,0x66,0xcc,0x83,
        0xa0,0x5b,0xb6,0x77,0xee,0xc7,0x95,0x31,
        0xa1,0x59,0xb2,0x7f,0xfe,0xe7,0xd5,0xb1,
        0xa2,0x5f,0xbe,0x67,0xce,0x87,0x15,0x2a,
        0xa3,0x5d,0xba,0x6f,0xde,0xa7,0x55,0xaa,
        0xa4,0x53,0xa6,0x57,0xae,0x47,0x8e,0x07,
        0xa5,0x51,0xa2,0x5f,0xbe,0x67,0xce,0x87,
        0xa6,0x57,0xae,0x47,0x8e,0x07,0x0e,0x1c,
        0xa7,0x55,0xaa,0x4f,0x9e,0x27,0x4e,0x9c,
        0xa8,0x4b,0x96,0x37,0x6e,0xdc,0xa3,0x5d,
        0xa9,0x49,0x92,0x3f,0x7e,0xfc,0xe3,0xdd,
        0xaa,0x4f,0x9e,0x27,0x4e,0x9c,0x23,0x46,
        0xab,0x4d,0x9a,0x2f,0x5e,0xbc,0x63,0xc6,
        0xac,0x43,0x86,0x17,0x2e,0x5c,0xb8,0x6b,
        0xad,0x41,0x82,0x1f,0x3e,0x7c,0xf8,0xeb,
        0xae,0x47,0x8e,0x07,0x0e,0x1c,0x38,0x70,
        0xaf,0x45,0x8a,0x0f,0x1e,0x3c,0x78,0xf0,
        0xb0,0x7b,0xf6,0xf7,0xf5,0xf1,0xf9,0xe9,
        0xb1,0x79,0xf2,0xff,0xe5,0xd1,0xb9,0x69,
        0xb2,0x7f,0xfe,0xe7,0xd5,0xb1,0x79,0xf2,
        0xb3,0x7d,0xfa,0xef,0xc5,0x91,0x39,0x72,
        0xb4,0x73,0xe6,0xd7,0xb5,0x71,0xe2,0xdf,
        0xb5,0x71,0xe2,0xdf,0xa5,0x51,0xa2,0x5f,
        0xb6,0x77,0xee,0xc7,0x95,0x31,0x62,0xc4,
        0xb7,0x75,0xea,0xcf,0x85,0x11,0x22,0x44,
        0xb8,0x6b,0xd6,0xb7,0x75,0xea,0xcf,0x85,
        0xb9,0x69,0xd2,0xbf,0x65,0xca,0x8f,0x05,
        0xba,0x6f,0xde,0xa7,0x55,0xaa,0x4f,0x9e,
        0xbb,0x6d,0xda,0xaf,0x45,0x8a,0x0f,0x1e,
        0xbc,0x63,0xc6,0x97,0x35,0x6a,0xd4,0xb3,
        0xbd,0x61,0xc2,0x9f,0x25,0x4a,0x94,0x33,
        0xbe,0x67,0xce,0x87,0x15,0x2a,0x54,0xa8,
        0xbf,0x65,0xca,0x8f,0x05,0x0a,0x14,0x28,
        0xc0,0x9b,0x2d,0x5a,0xb4,0x73,0xe6,0xd7,
        0xc1,0x99,0x29,0x52,0xa4,0x53,0xa6,0x57,
        0xc2,0x9f,0x25,0x4a,0x94,0x33,0x66,0xcc,
        0xc3,0x9d,0x21,0x42,0x84,0x13,0x26,0x4c,
        0xc4,0x93,0x3d,0x7a,0xf4,0xf3,0xfd,0xe1,
        0xc5,0x91,0x39,0x72,0xe4,0xd3,0xbd,0x61,
        0xc6,0x97,0x35,0x6a,0xd4,0xb3,0x7d,0xfa,
        0xc7,0x95,0x31,0x62,0xc4,0x93,0x3d,0x7a,
        0xc8,0x8b,0x0d,0x1a,0x34,0x68,0xd0,0xbb,
        0xc9,0x89,0x09,0x12,0x24,0x48,0x90,0x3b,
        0xca,0x8f,0x05,0x0a,0x14,0x28,0x50,0xa0,
        0xcb,0x8d,0x01,0x02,0x04,0x08,0x10,0x20,
        0xcc,0x83,0x1d,0x3a,0x74,0xe8,0xcb,0x8d,
        0xcd,0x81,0x19,0x32,0x64,0xc8,0x8b,0x0d,
        0xce,0x87,0x15,0x2a,0x54,0xa8,0x4b,0x96,
        0xcf,0x85,0x11,0x22,0x44,0x88,0x0b,0x16,
        0xd0,0xbb,0x6d,0xda,0xaf,0x45,0x8a,0x0f,
        0xd1,0xb9,0x69,0xd2,0xbf,0x65,0xca,0x8f,
        0xd2,0xbf,0x65,0xca,0x8f,0x05,0x0a,0x14,
        0xd3,0xbd,0x61,0xc2,0x9f,0x25,0x4a,0x94,
        0xd4,0xb3,0x7d,0xfa,0xef,0xc5,0x91,0x39,
        0xd5,0xb1,0x79,0xf2,0xff,0xe5,0xd1,0xb9,
        0xd6,0xb7,0x75,0xea,0xcf,0x85,0x11,0x22,
        0xd7,0xb5,0x71,0xe2,0xdf,0xa5,0x51,0xa2,
        0xd8,0xab,0x4d,0x9a,0x2f,0x5e,0xbc,0x63,
        0xd9,0xa9,0x49,0x92,0x3f,0x7e,0xfc,0xe3,
        0xda,0xaf,0x45,0x8a,0x0f,0x1e,0x3c,0x78,
        0xdb,0xad,0x41,0x82,0x1f,0x3e,0x7c,0xf8,
        0xdc,0xa3,0x5d,0xba,0x6f,0xde,0xa7,0x55,
        0xdd,0xa1,0x59,0xb2,0x7f,0xfe,0xe7,0xd5,
        0xde,0xa7,0x55,0xaa,0x4f,0x9e,0x27,0x4e,
        0xdf,0xa5,0x51,0xa2,0x5f,0xbe,0x67,0xce,
        0xe0,0xdb,0xad,0x41,0x82,0x1f,0x3e,0x7c,
        0xe1,0xd9,0xa9,0x49,0x92,0x3f,0x7e,0xfc,
        0xe2,0xdf,0xa5,0x51,0xa2,0x5f,0xbe,0x67,
        0xe3,0xdd,0xa1,0x59,0xb2,0x7f,0xfe,0xe7,
        0xe4,0xd3,0xbd,0x61,0xc2,0x9f,0x25,0x4a,
        0xe5,0xd1,0xb9,0x69,0xd2,0xbf,0x65,0xca,
        0xe6,0xd7,0xb5,0x71,0xe2,0xdf,0xa5,0x51,
        0xe7,0xd5,0xb1,0x79,0xf2,0xff,0xe5,0xd1,
        0xe8,0xcb,0x8d,0x01,0x02,0x04,0x08,0x10,
        0xe9,0xc9,0x89,0x09,0x12,0x24,0x48,0x90,
        0xea,0xcf,0x85,0x11,0x22,0x44,0x88,0x0b,
        0xeb,0xcd,0x81,0x19,0x32,0x64,0xc8,0x8b,
        0xec,0xc3,0x9d,0x21,0x42,0x84,0x13,0x26,
        0xed,0xc1,0x99,0x29,0x52,0xa4,0x53,0xa6,
        0xee,0xc7,0x95,0x31,0x62,0xc4,0x93,0x3d,
        0xef,0xc5,0x91,0x39,0x72,0xe4,0xd3,0xbd,
        0xf0,0xfb,0xed,0xc1,0x99,0x29,0x52,0xa4,
        0xf1,0xf9,0xe9,0xc9,0x89,0x09,0x12,0x24,
        0xf2,0xff,0xe5,0xd1,0xb9,0x69,0xd2,0xbf,
        0xf3,0xfd,0xe1,0xd9,0xa9,0x49,0x92,0x3f,
        0xf4,0xf3,0xfd,0xe1,0xd9,0xa9,0x49,0x92,
        0xf5,0xf1,0xf9,0xe9,0xc9,0x89,0x09,0x12,
        0xf6,0xf7,0xf5,0xf1,0xf9,0xe9,0xc9,0x89,
        0xf7,0xf5,0xf1,0xf9,0xe9,0xc9,0x89,0x09,
        0xf8,0xeb,0xcd,0x81,0x19,0x32,0x64,0xc8,
        0xf9,0xe9,0xc9,0x89,0x09,0x12,0x24,0x48,
        0xfa,0xef,0xc5,0x91,0x39,0x72,0xe4,0xd3,
        0xfb,0xed,0xc1,0x99,0x29,0x52,0xa4,0x53,
        0xfc,0xe3,0xdd,0xa1,0x59,0xb2,0x7f,0xfe,
        0xfd,0xe1,0xd9,0xa9,0x49,0x92,0x3f,0x7e,
        0xfe,0xe7,0xd5,0xb1,0x79,0xf2,0xff,0xe5,
        0xff,0xe5,0xd1,0xb9,0x69,0xd2,0xbf,0x65,
};


// gf256 := 0x11b , AES field
///
///


inline uint64_t add(uint64_t a, uint64_t b) {
    return a ^ b;
}

inline uint8_t mul(uint8_t a, uint8_t b) {
    const uint8_t *p = &__gf256_mulbase[b];
    uint8_t tmp = 0;
    tmp ^= (a &   1) ? p[0] : 0;
    tmp ^= (a &   2) ? p[1] : 0;
    tmp ^= (a &   4) ? p[2] : 0;
    tmp ^= (a &   8) ? p[3] : 0;
    tmp ^= (a &  16) ? p[4] : 0;
    tmp ^= (a &  32) ? p[5] : 0;
    tmp ^= (a &  64) ? p[6] : 0;
    tmp ^= (a & 128) ? p[7] : 0;
    return tmp;
}

uint64_t gf256v_mul_u64_v2(uint64_t a, uint8_t b) {
    const uint8_t *p = &__gf256_mulbase[b*8];
    uint64_t tmp = 0;
    tmp ^= ((a & 0x0101010101010101) >> 0) * p[0];
    tmp ^= ((a & 0x0202020202020202) >> 1) * p[1];
    tmp ^= ((a & 0x0404040404040404) >> 2) * p[2];
    tmp ^= ((a & 0x0808080808080808) >> 3) * p[3];
    tmp ^= ((a & 0x1010101010101010) >> 4) * p[4];
    tmp ^= ((a & 0x2020202020202020) >> 5) * p[5];
    tmp ^= ((a & 0x4040404040404040) >> 6) * p[6];
    tmp ^= ((a & 0x8080808080808080) >> 7) * p[7];
    return tmp;
}


/// 8 GF(256) elements with a single element
uint64_t gf256v_mul_u64(uint64_t a, uint8_t b) {
    const uint64_t mask_msb = 0x8080808080808080ULL;
    uint64_t a_msb;
    uint64_t a64 = a;
    uint64_t b32 = b;
    uint64_t r64 = a64*(b32&1);

    a_msb = a64&mask_msb;  // MSB, 7th bits
    a64 ^= a_msb;   // clear MSB
    a64 = (a64<<1)^((a_msb>>7)*0x1b);
    r64 ^= (a64)*((b32>>1)&1);

    a_msb = a64&mask_msb;  // MSB, 7th bits
    a64 ^= a_msb;   // clear MSB
    a64 = (a64<<1)^((a_msb>>7)*0x1b);
    r64 ^= (a64)*((b32>>2)&1);

    a_msb = a64&mask_msb;  // MSB, 7th bits
    a64 ^= a_msb;   // clear MSB
    a64 = (a64<<1)^((a_msb>>7)*0x1b);
    r64 ^= (a64)*((b32>>3)&1);

    a_msb = a64&mask_msb;  // MSB, 7th bits
    a64 ^= a_msb;   // clear MSB
    a64 = (a64<<1)^((a_msb>>7)*0x1b);
    r64 ^= (a64)*((b32>>4)&1);

    a_msb = a64&mask_msb;  // MSB, 7th bits
    a64 ^= a_msb;   // clear MSB
    a64 = (a64<<1)^((a_msb>>7)*0x1b);
    r64 ^= (a64)*((b32>>5)&1);

    a_msb = a64&mask_msb;  // MSB, 7th bits
    a64 ^= a_msb;   // clear MSB
    a64 = (a64<<1)^((a_msb>>7)*0x1b);
    r64 ^= (a64)*((b32>>6)&1);

    a_msb = a64&mask_msb;  // MSB, 7th bits
    a64 ^= a_msb;   // clear MSB
    a64 = (a64<<1)^((a_msb>>7)*0x1b);
    r64 ^= (a64)*((b32>>7)&1);

    return r64;
}

inline uint64_t gf256v_squ_u64(uint64_t a){

    uint32_t r64 = a&0x0101010101010101ULL;
    r64 ^= (a<<1)   &0x0404040404040404ULL; // x^1 -> x^2
    r64 ^= (a<<2)   &0x1010101010101010ULL; // x^2 -> x^4
    r64 ^= (a<<3)   &0x4040404040404040ULL; // x^3 -> x^6

    r64 ^= ((a>>4)&0x0101010101010101ULL)*0x1b;    	// x^4 -> x^8  --> 0x1b
    r64 ^= ((a>>5)&0x0101010101010101ULL)*(0x1b<<2);// x^5 -> x^10  --> (0x1b<<2)
    r64 ^= ((a>>6)&0x0101010101010101ULL)*(0xab);  	// x^6 -> x^12  --> (0xab)
    r64 ^= ((a>>7)&0x0101010101010101ULL)*(0x9a);  	// x^7 -> x^14  --> (0x9a)

    return r64;
}

inline uint8_t gf256_reduce_u64(uint64_t a) {
    uint32_t * aa = (uint32_t *)(&a);
    uint32_t r = aa[0]^aa[1];
    uint16_t *aaa = (uint16_t *)(&r);
    uint16_t rr = aaa[0] ^ aaa[1];
    uint8_t *rrr = (uint8_t *) (&rr);
    return rrr[0] ^ rrr[1];
}

#ifdef USE_AVX2
#include <immintrin.h>

typedef union v256_t {
    uint32_t v32[8];
    __m256i v256;
} v256;
/// NOTE: only the 32bit limbs in b are used. and those limbs must be < 256
__m256i gf256v_mul_u256_v2(__m256i a, __m256i b) {
    const __m256i mask1 = _mm256_set1_epi8(0x01);
    const __m256i mask2 = _mm256_set1_epi8(0x02);
    const __m256i mask3 = _mm256_set1_epi8(0x04);
    const __m256i mask4 = _mm256_set1_epi8(0x08);
    const __m256i mask5 = _mm256_set1_epi8(0x10);
    const __m256i mask6 = _mm256_set1_epi8(0x20);
    const __m256i mask7 = _mm256_set1_epi8(0x40);
    const __m256i mask8 = _mm256_set1_epi8(0x80);

    const __m256i mask = _mm256_set1_epi32(0xff);


    __m256i tmp;
    __m256i p = _mm256_i32gather_epi32((int const *)__gf256_mulbase, b, 8);
    p = _mm256_and_si256(p, mask);

    tmp = _mm256_mullo_epi32(_mm256_and_si256(a, mask1), p);
    p = _mm256_and_si256(_mm256_i32gather_epi32((int const *)((uint8_t *)__gf256_mulbase + 1), b, 8), mask);
    tmp = _mm256_xor_si256(tmp, _mm256_mul_epi32(_mm256_srli_epi64(_mm256_and_si256(a, mask2), 1), p));
    p = _mm256_and_si256(_mm256_i32gather_epi32((int const *)((uint8_t *)__gf256_mulbase + 2), b, 8), mask);
    tmp = _mm256_xor_si256(tmp, _mm256_mul_epi32(_mm256_srli_epi64(_mm256_and_si256(a, mask3), 2), p));
    p = _mm256_and_si256(_mm256_i32gather_epi32((int const *)((uint8_t *)__gf256_mulbase + 3), b, 8), mask);
    tmp = _mm256_xor_si256(tmp, _mm256_mul_epi32(_mm256_srli_epi64(_mm256_and_si256(a, mask4), 3), p));
    p = _mm256_and_si256(_mm256_i32gather_epi32((int const *)((uint8_t *)__gf256_mulbase + 4), b, 8), mask);
    tmp = _mm256_xor_si256(tmp, _mm256_mul_epi32(_mm256_srli_epi64(_mm256_and_si256(a, mask5), 4), p));
    p = _mm256_and_si256(_mm256_i32gather_epi32((int const *)((uint8_t *)__gf256_mulbase + 5), b, 8), mask);
    tmp = _mm256_xor_si256(tmp, _mm256_mul_epi32(_mm256_srli_epi64(_mm256_and_si256(a, mask6), 5), p));
    p = _mm256_and_si256(_mm256_i32gather_epi32((int const *)((uint8_t *)__gf256_mulbase + 6), b, 8), mask);
    tmp = _mm256_xor_si256(tmp, _mm256_mul_epi32(_mm256_srli_epi64(_mm256_and_si256(a, mask7), 6), p));
    p = _mm256_and_si256(_mm256_i32gather_epi32((int const *)((uint8_t *)__gf256_mulbase + 7), b, 8), mask);
    tmp = _mm256_xor_si256(tmp, _mm256_mul_epi32(_mm256_srli_epi64(_mm256_and_si256(a, mask8), 7), p));

    return tmp;
}

#elif defined(USE_NEON)
#else
#endif // end avx/neon
#endif // end namespace
